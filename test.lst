PC     Output      Line
040000             0001        include "agon.inc"
040000             0001*   ; VDP and MOS-specific routines for Plasma Generator on AgonLight, Agon Console8
040000             0002*   ; Copyright 2018-2024 J.B. Langston
040000             0003*   ;
040000             0004*   ; Permission is hereby granted, free of charge, to any person obtaining a
040000             0005*   ; copy of this software and associated documentation files (the "Software"),
040000             0006*   ; to deal in the Software without restriction, including without limitation
040000             0007*   ; the rights to use, copy, modify, merge, publish, distribute, sublicense,
040000             0008*   ; and/or sell copies of the Software, and to permit persons to whom the
040000             0009*   ; Software is furnished to do so, subject to the following conditions:
040000             0010*   ;
040000             0011*   ; The above copyright notice and this permission notice shall be included in
040000             0012*   ; all copies or substantial portions of the Software.
040000             0013*   ;
040000             0014*   ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
040000             0015*   ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
040000             0016*   ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
040000             0017*   ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
040000             0018*   ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
040000             0019*   ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
040000             0020*   ; DEALINGS IN THE SOFTWARE.
040000             0021*   
040000             0022*   ScreenMode:     equ 9                           ; 640x480 16 colors
040000             0023*   ScreenWidth:    equ 40
040000             0024*   ScreenHeight:   equ 30
040000             0025*   ScreenSize:     equ ScreenWidth*ScreenHeight
040000             0026*   PageMask:       equ $ffff00                     ; 24-bit addresses
040000             0027*   
040000             0028*   ; convenience macros
040000             0029*   
040000             0030*       macro DefPointer addr
040000             0031*           .dl addr
040000             0032*       endmacro
040000             0033*   
040000             0034*   ; executable preamble
040000             0035*   
040000             0036*       .assume adl=1                           ; ez80 ADL memory mode
040000             0037*       .org $40000                             ; load code here
040000             0038*   
040000 C3 E0 00 04 0039*       jp Entry                                ; jump to start of code
040004             0040*   
040004 FF FF FF FF 0041*       .align 64                               ; MOS header
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53 00 0042*       .db "MOS",0,1
       01          
040045             0043*   
040045             0044*       include "mos.inc"
040045             0001**  ; License: https://github.com/AgonConsole8/agon-mos/blob/main/LICENSE
040045             0002**  ; Copyright (c) 2022 Dean Belfield
040045             0003**  ;
040045             0004**  ; Permission is hereby granted, free of charge, to any person obtaining a copy
040045             0005**  ; of this software and associated documentation files (the "Software"), to deal
040045             0006**  ; in the Software without restriction, including without limitation the rights
040045             0007**  ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
040045             0008**  ; copies of the Software, and to permit persons to whom the Software is
040045             0009**  ; furnished to do so, subject to the following conditions:
040045             0010**  ;
040045             0011**  ; The above copyright notice and this permission notice shall be included in all
040045             0012**  ; copies or substantial portions of the Software.
040045             0013**  ;
040045             0014**  ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
040045             0015**  ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
040045             0016**  ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
040045             0017**  ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
040045             0018**  ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
040045             0019**  ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
040045             0020**  ; SOFTWARE.
040045             0021**  
040045             0022**  ; Taken from https://github.com/AgonConsole8/agon-mos/blob/main/src/mos_api.inc on 2024-04-16
040045             0023**  
040045             0024**  ;
040045             0025**  ; Title:        AGON MOS - API for user projects
040045             0026**  ; Author:        Dean Belfield
040045             0027**  ; Created:        03/08/2022
040045             0028**  ; Last Updated:        11/11/2023
040045             0029**  ;
040045             0030**  ; Modinfo:
040045             0031**  ; 05/08/2022:        Added mos_feof
040045             0032**  ; 09/08/2022:        Added system variables: cursorX, cursorY
040045             0033**  ; 18/08/2022:        Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0034**  ; 05/09/2022:        Added mos_ren, vdp_pflag_mode
040045             0035**  ; 24/09/2022:        Added mos_getError, mos_mkdir
040045             0036**  ; 13/10/2022:        Added mos_oscli
040045             0037**  ; 23/02/2023:        Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0038**  ; 04/03/2023:        Added sysvar_scrpixelIndex
040045             0039**  ; 08/03/2023:        Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0040**  ; 15/03/2023:        Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0041**  ; 21/03/2023:        Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0042**  ; 22/03/2023:        The VDP commands are now indexed from 0x80
040045             0043**  ; 29/03/2023:        Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0044**  ; 13/04/2023:        Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0045**  ; 15/04/2023:        Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0046**  ; 19/05/2023:        Added sysvar_scrMode
040045             0047**  ; 05/06/2023:        Added sysvar_rtcEnable
040045             0048**  ; 03/08/2023:        Added mos_setkbvector
040045             0049**  ; 10/08/2023:        Added mos_getkbmap
040045             0050**  ; 11/11/2023:        Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0051**  
040045             0052**  ; Macro for calling the API
040045             0053**  ; Parameters:
040045             0054**  ; - function: One of the function numbers listed above
040045             0055**      macro MosCall function
040045             0056**          ld a, function
040045             0057**          rst.lis $08
040045             0058**      endmacro
040045             0059**  
040045             0060**  ; VDP control (VDU 23, 0, n)
040045             0061**  ;
040045             0062**  vdp_gp:                 EQU        80h
040045             0063**  vdp_keycode:            EQU        81h
040045             0064**  vdp_cursor:             EQU        82h
040045             0065**  vdp_scrchar:            EQU        83h
040045             0066**  vdp_scrpixel:           EQU        84h
040045             0067**  vdp_audio:              EQU        85h
040045             0068**  vdp_mode:               EQU        86h
040045             0069**  vdp_rtc:                EQU        87h
040045             0070**  vdp_keystate:           EQU        88h
040045             0071**  vdp_logicalcoords:      EQU        C0h
040045             0072**  vdp_terminalmode:       EQU        FFh
040045             0073**  
040045             0074**  ; MOS high level functions
040045             0075**  ;
040045             0076**  mos_getkey:             EQU        00h
040045             0077**  mos_load:               EQU        01h
040045             0078**  mos_save:               EQU        02h
040045             0079**  mos_cd:                 EQU        03h
040045             0080**  mos_dir:                EQU        04h
040045             0081**  mos_del:                EQU        05h
040045             0082**  mos_ren:                EQU        06h
040045             0083**  mos_mkdir:              EQU        07h
040045             0084**  mos_sysvars:            EQU        08h
040045             0085**  mos_editline:           EQU        09h
040045             0086**  mos_fopen:              EQU        0Ah
040045             0087**  mos_fclose:             EQU        0Bh
040045             0088**  mos_fgetc:              EQU        0Ch
040045             0089**  mos_fputc:              EQU        0Dh
040045             0090**  mos_feof:               EQU        0Eh
040045             0091**  mos_getError:           EQU        0Fh
040045             0092**  mos_oscli:              EQU        10h
040045             0093**  mos_copy:               EQU        11h
040045             0094**  mos_getrtc:             EQU        12h
040045             0095**  mos_setrtc:             EQU        13h
040045             0096**  mos_setintvector:       EQU        14h
040045             0097**  mos_uopen:              EQU        15h
040045             0098**  mos_uclose:             EQU        16h
040045             0099**  mos_ugetc:              EQU        17h
040045             0100**  mos_uputc:              EQU        18h
040045             0101**  mos_getfil:             EQU        19h
040045             0102**  mos_fread:              EQU        1Ah
040045             0103**  mos_fwrite:             EQU        1Bh
040045             0104**  mos_flseek:             EQU        1Ch
040045             0105**  mos_setkbvector:        EQU        1Dh
040045             0106**  mos_getkbmap:           EQU        1Eh
040045             0107**  mos_i2c_open:           EQU        1Fh
040045             0108**  mos_i2c_close:          EQU        20h
040045             0109**  mos_i2c_write:          EQU        21h
040045             0110**  mos_i2c_read:           EQU        22h
040045             0111**  
040045             0112**  
040045             0113**  ; FatFS file access functions
040045             0114**  ;
040045             0115**  ffs_fopen:              EQU        80h
040045             0116**  ffs_fclose:             EQU        81h
040045             0117**  ffs_fread:              EQU        82h
040045             0118**  ffs_fwrite:             EQU        83h
040045             0119**  ffs_flseek:             EQU        84h
040045             0120**  ffs_ftruncate:          EQU        85h
040045             0121**  ffs_fsync:              EQU        86h
040045             0122**  ffs_fforward:           EQU        87h
040045             0123**  ffs_fexpand:            EQU        88h
040045             0124**  ffs_fgets:              EQU        89h
040045             0125**  ffs_fputc:              EQU        8Ah
040045             0126**  ffs_fputs:              EQU        8Bh
040045             0127**  ffs_fprintf:            EQU        8Ch
040045             0128**  ffs_ftell:              EQU        8Dh
040045             0129**  ffs_feof:               EQU        8Eh
040045             0130**  ffs_fsize:              EQU        8Fh
040045             0131**  ffs_ferror:             EQU        90h
040045             0132**  
040045             0133**  ; FatFS directory access functions
040045             0134**  ;
040045             0135**  ffs_dopen:              EQU        91h
040045             0136**  ffs_dclose:             EQU        92h
040045             0137**  ffs_dread:              EQU        93h
040045             0138**  ffs_dfindfirst:         EQU        94h
040045             0139**  ffs_dfindnext:          EQU        95h
040045             0140**  
040045             0141**  ; FatFS file and directory management functions
040045             0142**  ;
040045             0143**  ffs_stat:               EQU        96h
040045             0144**  ffs_unlink:             EQU        97h
040045             0145**  ffs_rename:             EQU        98h
040045             0146**  ffs_chmod:              EQU        99h
040045             0147**  ffs_utime:              EQU        9Ah
040045             0148**  ffs_mkdir:              EQU        9Bh
040045             0149**  ffs_chdir:              EQU        9Ch
040045             0150**  ffs_chdrive:            EQU        9Dh
040045             0151**  ffs_getcwd:             EQU        9Eh
040045             0152**  
040045             0153**  ; FatFS volume management and system configuration functions
040045             0154**  ;
040045             0155**  ffs_mount:              EQU        9Fh
040045             0156**  ffs_mkfs:               EQU        A0h
040045             0157**  ffs_fdisk:              EQU        A1h
040045             0158**  ffs_getfree:            EQU        A2h
040045             0159**  ffs_getlabel:           EQU        A3h
040045             0160**  ffs_setlabel:           EQU        A4h
040045             0161**  ffs_setcp:              EQU        A5h
040045             0162**  
040045             0163**  ; File access modes
040045             0164**  ;
040045             0165**  fa_read:                EQU        01h
040045             0166**  fa_write:               EQU        02h
040045             0167**  fa_open_existing:       EQU        00h
040045             0168**  fa_create_new:          EQU        04h
040045             0169**  fa_create_always:       EQU        08h
040045             0170**  fa_open_always:         EQU        10h
040045             0171**  fa_open_append:         EQU        30h
040045             0172**  
040045             0173**  ; System variable indexes for api_sysvars
040045             0174**  ; Index into _sysvars in globals.asm
040045             0175**  ;
040045             0176**  sysvar_time:            EQU        00h        ; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0177**  sysvar_vpd_pflags:      EQU        04h        ; 1: Flags to indicate completion of VDP commands
040045             0178**  sysvar_keyascii:        EQU        05h        ; 1: ASCII keycode, or 0 if no key is pressed
040045             0179**  sysvar_keymods:         EQU        06h        ; 1: Keycode modifiers
040045             0180**  sysvar_cursorX:         EQU        07h        ; 1: Cursor X position
040045             0181**  sysvar_cursorY:         EQU        08h        ; 1: Cursor Y position
040045             0182**  sysvar_scrchar:         EQU        09h        ; 1: Character read from screen
040045             0183**  sysvar_scrpixel:        EQU        0Ah        ; 3: Pixel data read from screen (R,B,G)
040045             0184**  sysvar_audioChannel:    EQU        0Dh        ; 1: Audio channel
040045             0185**  sysvar_audioSuccess:    EQU        0Eh        ; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0186**  sysvar_scrWidth:        EQU        0Fh        ; 2: Screen width in pixels
040045             0187**  sysvar_scrHeight:       EQU        11h        ; 2: Screen height in pixels
040045             0188**  sysvar_scrCols:         EQU        13h        ; 1: Screen columns in characters
040045             0189**  sysvar_scrRows:         EQU        14h        ; 1: Screen rows in characters
040045             0190**  sysvar_scrColours:      EQU        15h        ; 1: Number of colours displayed
040045             0191**  sysvar_scrpixelIndex:   EQU        16h        ; 1: Index of pixel data read from screen
040045             0192**  sysvar_vkeycode:        EQU        17h        ; 1: Virtual key code from FabGL
040045             0193**  sysvar_vkeydown:        EQU        18h        ; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0194**  sysvar_vkeycount:       EQU        19h        ; 1: Incremented every time a key packet is received
040045             0195**  sysvar_rtc:             EQU        1Ah        ; 6: Real time clock data
040045             0196**  sysvar_spare:           EQU        20h        ; 2: Spare, previously used by rtc
040045             0197**  sysvar_keydelay:        EQU        22h        ; 2: Keyboard repeat delay
040045             0198**  sysvar_keyrate:         EQU        24h        ; 2: Keyboard repeat reat
040045             0199**  sysvar_keyled:          EQU        26h        ; 1: Keyboard LED status
040045             0200**  sysvar_scrMode:         EQU        27h        ; 1: Screen mode
040045             0201**  sysvar_rtcEnable:       EQU        28h        ; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0202**  sysvar_mouseX:          EQU        29h        ; 2: Mouse X position
040045             0203**  sysvar_mouseY:          EQU        2Bh        ; 2: Mouse Y position
040045             0204**  sysvar_mouseButtons:    EQU        2Dh        ; 1: Mouse button state
040045             0205**  sysvar_mouseWheel:      EQU        2Eh        ; 1: Mouse wheel delta
040045             0206**  sysvar_mouseXDelta:     EQU        2Fh        ; 2: Mouse X delta
040045             0207**  sysvar_mouseYDelta:     EQU        31h        ; 2: Mouse Y delta
040045             0208**  
040045             0209**  ; Flags for the VPD protocol
040045             0210**  ;
040045             0211**  vdp_pflag_cursor:       EQU        00000001b
040045             0212**  vdp_pflag_scrchar:      EQU        00000010b
040045             0213**  vdp_pflag_point:        EQU        00000100b
040045             0214**  vdp_pflag_audio:        EQU        00001000b
040045             0215**  vdp_pflag_mode:         EQU        00010000b
040045             0216**  vdp_pflag_rtc:          EQU        00100000b
040045             0217**  vdp_pflag_mouse:        EQU        01000000b
040045             0218**  ; vdp_pflag_buffered:        EQU        10000000b
040045             0219**  
040045             0220**  ; commented out for compatiblitiy with ez80asm
040045             0221**  
040045             0222**  ;; FatFS structures
040045             0223**  ;; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0224**  ;;
040045             0225**  ;; Object ID and allocation information (FFOBJID)
040045             0226**  ;;
040045             0227**  ;FFOBJID	.STRUCT
040045             0228**  ;	fs:		DS	3	; Pointer to the hosting volume of this object
040045             0229**  ;	id:		DS	2	; Hosting volume mount ID
040045             0230**  ;	attr:		DS	1	; Object attribute
040045             0231**  ;	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0232**  ;	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040045             0233**  ;	objsize:	DS	4	; Object size (valid when sclust != 0)
040045             0234**  ;FFOBJID_SIZE .ENDSTRUCT FFOBJID
040045             0235**  ;;
040045             0236**  ;; File object structure (FIL)
040045             0237**  ;;
040045             0238**  ;FIL .STRUCT
040045             0239**  ;	obj:		.TAG	FFOBJID	; Object identifier
040045             0240**  ;	flag:		DS	1	; File status flags
040045             0241**  ;	err:		DS	1	; Abort flag (error code)
040045             0242**  ;	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040045             0243**  ;	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040045             0244**  ;	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040045             0245**  ;	dir_sect:	DS	4	; Sector number containing the directory entry
040045             0246**  ;	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040045             0247**  ;FIL_SIZE .ENDSTRUCT FIL
040045             0248**  ;;
040045             0249**  ;; Directory object structure (DIR)
040045             0250**  ;;
040045             0251**  ;DIR .STRUCT
040045             0252**  ;	obj:		.TAG	FFOBJID	; Object identifier
040045             0253**  ;	dptr:		DS	4	; Current read/write offset
040045             0254**  ;	clust:		DS	4	; Current cluster
040045             0255**  ;	sect:		DS	4	; Current sector (0:Read operation has terminated)
040045             0256**  ;	dir:		DS	3	; Pointer to the directory item in the win[]
040045             0257**  ;	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040045             0258**  ;	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0259**  ;DIR_SIZE .ENDSTRUCT DIR
040045             0260**  ;;
040045             0261**  ;; File information structure (FILINFO)
040045             0262**  ;;
040045             0263**  ;FILINFO .STRUCT
040045             0264**  ;	fsize:		DS 	4	; File size
040045             0265**  ;	fdate:		DS	2	; Modified date
040045             0266**  ;	ftime:		DS	2	; Modified time
040045             0267**  ;	fattrib:	DS	1	; File attribute
040045             0268**  ;	altname:	DS	13	; Alternative file name
040045             0269**  ;	fname:		DS	256	; Primary file name
040045             0270**  ;FILINFO_SIZE .ENDSTRUCT FILINFO
040045             0045*       include "vdu.inc"
040045             0001**  ; Agon VDU commands equates and convenience functions
040045             0002**  ; Copyright 2024 J.B. Langston
040045             0003**  ;
040045             0004**  ; Permission is hereby granted, free of charge, to any person obtaining a
040045             0005**  ; copy of this software and associated documentation files (the "Software"),
040045             0006**  ; to deal in the Software without restriction, including without limitation
040045             0007**  ; the rights to use, copy, modify, merge, publilh, distribute, sublicense,
040045             0008**  ; and/or sell copies of the Software, and to permit persons to whom the
040045             0009**  ; Software is furnished to do so, subject to the following conditions:
040045             0010**  ;
040045             0011**  ; The above copyright notice and this permission notice shall be included in
040045             0012**  ; all copies or substantial portions of the Software.
040045             0013**  ;
040045             0014**  ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
040045             0015**  ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
040045             0016**  ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
040045             0017**  ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
040045             0018**  ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
040045             0019**  ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
040045             0020**  ; DEALINGS IN THE SOFTWARE.
040045             0021**  
040045             0022**  ; convenience macros
040045             0023**      macro SendByteA
040045             0024**          rst.lil $10
040045             0025**      endmacro
040045             0026**  
040045             0027**      macro SendByte value
040045             0028**          ld a, value
040045             0029**          rst.lil $10
040045             0030**      endmacro
040045             0031**  
040045             0032**      macro SendBytesHLBC
040045             0033**          rst.lil $18
040045             0034**      endmacro
040045             0035**  
040045             0036**      macro SendBytes addr, length
040045             0037**          ld hl, addr
040045             0038**          ld bc, length
040045             0039**          rst.lil $18
040045             0040**      endmacro
040045             0041**  
040045             0042**      macro SendString addr, term
040045             0043**          ld hl, addr
040045             0044**          ld bc, 0
040045             0045**          ld a, term
040045             0046**          rst.lil $18
040045             0047**      endmacro
040045             0048**  
040045             0049**  ; VDU commands
040045             0050**  
040045             0051**  ; https://agonconsole8.github.io/agon-docs/vdp/VDU-Commands/
040045             0052**  VduNull: equ 0
040045             0053**  VduPrinterChar: equ 1
040045             0054**  VduPrinterOn: equ 2
040045             0055**  VduPrinterOff: equ 3
040045             0056**  VduTextCursor: equ 4
040045             0057**  VduGraphicsCursor: equ 5
040045             0058**  VduEnableScreen: equ 8
040045             0059**  VduBeep: equ 7
040045             0060**  VduCursorLeft: equ 8
040045             0061**  VduCursorRight: equ 9
040045             0062**  VduCursorDown: equ 10
040045             0063**  VduCursorUp: equ 11
040045             0064**  VduClearScreen: equ 12
040045             0065**  VduCarriageReturn: equ 13
040045             0066**  VduPageModeOn: equ 14
040045             0067**  VduPageModeOff: equ 15
040045             0068**  VduClearGraphics: equ 16
040045             0069**  VduTextColor: equ 17
040045             0070**  VduBackgroundColor: equ 128
040045             0071**  VduGraphicsColor: equ 18
040045             0072**  VduSetPalette: equ 19
040045             0073**  VduSetPaletteRGB: equ $ff
040045             0074**  VduResetPalette: equ 20
040045             0075**  VduDisableScreen: equ 21
040045             0076**  VduSetMode: equ 22
040045             0077**  VduCustomChar: equ 23
040045             0078**  VduCommand: equ 23
040045             0079**  VduGraphicsViewport: equ 24
040045             0080**  VduPlot: equ 25
040045             0081**  VduResetViewports: equ 26
040045             0082**  VduEscapeChar: equ 27
040045             0083**  VduTextViewport: equ 28
040045             0084**  VduGraphicsOrigin: equ 29
040045             0085**  VduCursorHome: equ 30
040045             0086**  VduCursorMove: equ 31
040045             0087**  VduBackspace: equ 127
040045             0088**  
040045             0089**  ; https://agonconsole8.github.io/agon-docs/vdp/System-Commands/
040045             0090**  VduSystem: equ 0
040045             0091**  VduVsyncBufferSwap: equ $C3
040045             0092**  VduMapCharToBitmap: equ $92
040045             0093**  
040045             0094**  ; https://agonconsole8.github.io/agon-docs/vdp/VDU-Commands/#vdu-23-1-n-cursor-control
040045             0095**  VduCursorDisplay: equ 1
040045             0096**  VduCursorHide: equ 0
040045             0097**  VduCursorShow: equ 1
040045             0098**  VduCursorSteady: equ 2
040045             0099**  VduCursorFlash: equ 3
040045             0100**  
040045             0101**  ; https://agonconsole8.github.io/agon-docs/vdp/VDU-Commands/#vdu-23-16-setting-mask-define-cursor-movement-behaviour
040045             0102**  VduCursorMovement: equ 16
040045             0103**  VduScrollProtection: equ %00000001
040045             0104**  
040045             0105**  ; https://github.com/AgonConsole8/agon-docs/blob/main/docs/vdp/Buffered-Commands-API.md
040045             0106**  VduBuffer: equ $A0
040045             0107**  VduBufferWriteBlock: equ 0
040045             0108**  VduBufferCall: equ 1
040045             0109**  VduBufferClear: equ 2
040045             0110**  
040045             0111**  ; https://github.com/AgonConsole8/agon-docs/blob/main/docs/vdp/Bitmaps-API.md
040045             0112**  VduBitmap: equ 27
040045             0113**  VduBitmapSelect: equ 0
040045             0114**  VduBitmapLoad: equ 1
040045             0115**  VduBitmapSolidColor: equ 2
040045             0116**  VduBitmapDraw: equ 3
040045             0117**  VduBitmapSelectBuffer: equ $20
040045             0118**  VduBitmapCreateBuffer: equ $21
040045             0119**  VduBitmapFormatRGBA8888: equ 0
040045             0120**  VduBitmapFormatRGBA2222: equ 1
040045             0121**  VduBitmapFormatMono: equ 2
040045             0122**  VduBitmapFormatNative: equ 3
040045             0123**  
040045             0124**  ; standard control characters
040045             0125**  CR:	    equ     0dh
040045             0126**  LF:	    equ     0ah
040045             0127**  EOS:    equ     0       ; end of string (null terminated)
040045             0128**  
040045             0129**  ; output a character
040045             0130**  ; A = character to output
040045             0131**  CharOut:
040045 5B D7       0132**      rst.lil $10
040047 C9          0133**      ret
040048             0134**  
040048             0135**  ; output a string terminated by EOS
040048             0136**  ; HL = address of string
040048             0137**  StringOut:
040048 01 00 00 00 0138**      ld bc, 0
04004C 3E 00       0139**      ld a, EOS
04004E             0140**      ; fallthrough
04004E             0141**  
04004E             0142**  ; output a specified number of bytes
04004E             0143**  ; HL = address of bytes
04004E             0144**  ; BC = byte count
04004E             0145**  BytesOut:
04004E             0146**      SendBytesHLBC
04004E 5B DF       0001**M         rst.lil $18
040050 C9          0147**      ret
040051             0148**  
040051             0149**  ; output a space
040051             0150**  Space:
040051             0151**      SendByte ' '
040051 3E 20       0001**M         ld a, value
040053 5B D7       0002**M         rst.lil $10
040055 C9          0152**      ret
040056             0153**  
040056             0154**  ; output a new line
040056             0155**  NewLine:
040056             0156**      SendByte CR
040056 3E 0D       0001**M         ld a, value
040058 5B D7       0002**M         rst.lil $10
04005A             0157**      SendByte LF
04005A 3E 0A       0001**M         ld a, value
04005C 5B D7       0002**M         rst.lil $10
04005E C9          0158**      ret
04005F             0159**  
04005F             0160**  ; set the VDP mode
04005F             0161**  ; C = mode number
04005F             0162**  VdpMode:
04005F             0163**      SendByte VduSetMode
04005F 3E 16       0001**M         ld a, value
040061 5B D7       0002**M         rst.lil $10
040063             0164**      SendByte c
040063 79          0001**M         ld a, value
040064 5B D7       0002**M         rst.lil $10
040066 C9          0165**      ret
040067             0166**  
040067             0167**  ; clear the screen
040067             0168**  ClearScreen:
040067             0169**      SendByte VduClearScreen
040067 3E 0C       0001**M         ld a, value
040069 5B D7       0002**M         rst.lil $10
04006B C9          0170**      ret
04006C             0171**  
04006C             0172**  ; move to X, Y coordinates
04006C             0173**  ; C = x coordinate
04006C             0174**  ; B = Y coordinate
04006C             0175**  MoveTo:
04006C             0176**      SendByte VduCursorMove
04006C 3E 1F       0001**M         ld a, value
04006E 5B D7       0002**M         rst.lil $10
040070             0177**      SendByte c
040070 79          0001**M         ld a, value
040071 5B D7       0002**M         rst.lil $10
040073             0178**      SendByte b
040073 78          0001**M         ld a, value
040074 5B D7       0002**M         rst.lil $10
040076 C9          0179**      ret
040077             0180**  
040077             0181**  ; set default text color
040077             0182**  DefaultTextColor:
040077 06 00       0183**      ld b, 0                     ; white on black in default palette
040079 0E 0F       0184**      ld c, 15
04007B             0185**      ; fallthrough
04007B             0186**  
04007B             0187**  ; set text color
04007B             0188**  ; C = pen (foreground) color
04007B             0189**  ; B = paper (background) color
04007B             0190**  TextColor:
04007B             0191**      SendByte VduTextColor       ; pen (foreground)
04007B 3E 11       0001**M         ld a, value
04007D 5B D7       0002**M         rst.lil $10
04007F             0192**      SendByte c
04007F 79          0001**M         ld a, value
040080 5B D7       0002**M         rst.lil $10
040082             0193**      SendByte VduTextColor       ; paper (background)
040082 3E 11       0001**M         ld a, value
040084 5B D7       0002**M         rst.lil $10
040086 78          0194**      ld a, b
040087 C6 80       0195**      add VduBackgroundColor
040089 5B D7       0196**      rst.lil $10
04008B C9          0197**      ret
04008C             0198**  
04008C             0199**  ; hide the text cursor
04008C             0200**  TextCursorHide:
04008C             0201**      SendByte VduCommand
04008C 3E 17       0001**M         ld a, value
04008E 5B D7       0002**M         rst.lil $10
040090             0202**      SendByte VduCursorDisplay
040090 3E 01       0001**M         ld a, value
040092 5B D7       0002**M         rst.lil $10
040094             0203**      SendByte VduCursorHide
040094 3E 00       0001**M         ld a, value
040096 5B D7       0002**M         rst.lil $10
040098 C9          0204**      ret
040099             0205**  
040099             0206**  ; show the text cursor
040099             0207**  TextCursorShow:
040099             0208**      SendByte VduCommand
040099 3E 17       0001**M         ld a, value
04009B 5B D7       0002**M         rst.lil $10
04009D             0209**      SendByte VduCursorDisplay
04009D 3E 01       0001**M         ld a, value
04009F 5B D7       0002**M         rst.lil $10
0400A1             0210**      SendByte VduCursorShow
0400A1 3E 01       0001**M         ld a, value
0400A3 5B D7       0002**M         rst.lil $10
0400A5 C9          0211**      ret
0400A6             0212**  
0400A6             0213**  ; Set the specified cursor movement bits
0400A6             0214**  ; C = bits to set
0400A6             0215**  SetCursorMovementBit:
0400A6             0216**      SendByte VduCommand
0400A6 3E 17       0001**M         ld a, value
0400A8 5B D7       0002**M         rst.lil $10
0400AA             0217**      SendByte VduCursorMovement
0400AA 3E 10       0001**M         ld a, value
0400AC 5B D7       0002**M         rst.lil $10
0400AE 79          0218**      ld a, c
0400AF 2F          0219**      cpl
0400B0             0220**      SendByteA
0400B0 5B D7       0001**M         rst.lil $10
0400B2 2F          0221**      cpl
0400B3             0222**      SendByteA
0400B3 5B D7       0001**M         rst.lil $10
0400B5 C9          0223**      ret
0400B6             0224**  
0400B6             0225**  ; clear the specified cursor movement bits
0400B6             0226**  ; C = bits to clear
0400B6             0227**  ClearCursorMovementBit:
0400B6             0228**      SendByte VduCommand
0400B6 3E 17       0001**M         ld a, value
0400B8 5B D7       0002**M         rst.lil $10
0400BA             0229**      SendByte VduCursorMovement
0400BA 3E 10       0001**M         ld a, value
0400BC 5B D7       0002**M         rst.lil $10
0400BE 79          0230**      ld a, c
0400BF 2F          0231**      cpl
0400C0             0232**      SendByteA
0400C0 5B D7       0001**M         rst.lil $10
0400C2 AF          0233**      xor a
0400C3             0234**      SendByteA
0400C3 5B D7       0001**M         rst.lil $10
0400C5 C9          0235**      ret
0400C6             0236**  
0400C6             0237**  ; prevent the screen from scrolling when the last character is written
0400C6             0238**  EnableScrollProtection:
0400C6 0E 01       0239**      ld c, VduScrollProtection
0400C8 C3 A6 00 04 0240**      jp SetCursorMovementBit
0400CC             0241**  
0400CC             0242**  ; allow the screen to scroll when the last character is written
0400CC             0243**  DisableScrollProtection:
0400CC 0E 01       0244**      ld c, VduScrollProtection
0400CE C3 B6 00 04 0245**      jp ClearCursorMovementBit
0400D2 C9          0246**      ret
0400D3             0247**  
0400D3             0248**  ; wait for vsync (and swap buffers if using a buffered video mode)
0400D3             0249**  WaitVSync:
0400D3             0250**      SendByte VduCommand
0400D3 3E 17       0001**M         ld a, value
0400D5 5B D7       0002**M         rst.lil $10
0400D7             0251**      SendByte VduSystem
0400D7 3E 00       0001**M         ld a, value
0400D9 5B D7       0002**M         rst.lil $10
0400DB             0252**      SendByte VduVsyncBufferSwap
0400DB 3E C3       0001**M         ld a, value
0400DD 5B D7       0002**M         rst.lil $10
0400DF C9          0253**      ret
0400E0             0046*   
0400E0             0047*   Entry:
0400E0 F5          0048*       push af                                 ; store all the registers
0400E1 C5          0049*       push bc
0400E2 D5          0050*       push de
0400E3 DD E5       0051*       push ix
0400E5 FD E5       0052*       push iy
0400E7             0053*   
0400E7 C3 99 07 04 0054*       jp Main
0400EB             0055*   
0400EB             0056*   Exit:
0400EB CD 77 00 04 0057*       call DefaultTextColor
0400EF FD E1       0058*       pop iy                                  ; pop all registers back from the stack
0400F1 DD E1       0059*       pop ix
0400F3 D1          0060*       pop de
0400F4 C1          0061*       pop bc
0400F5 F1          0062*       pop af
0400F6 21 00 00 00 0063*       ld hl,0                                 ; load the MOS API return code (0) for no errors.
0400FA C9          0064*       ret                                     ; return to MOS
0400FB             0065*   
0400FB             0066*   ; platform specific graphics initialization
0400FB             0067*   InitGraphics:
0400FB 0E 09       0068*       ld c, ScreenMode
0400FD CD 5F 00 04 0069*       call VdpMode
040101 CD 63 01 04 0070*       call LoadGradient
040105 CD 43 01 04 0071*       call LoadC64Palette
040109 CD 77 00 04 0072*       call DefaultTextColor
04010D CD 8C 00 04 0073*       call TextCursorHide
040111             0074*       ;call EnableScrollProtection
040111 C9          0075*       ret
040112             0076*   
040112             0077*   
040112             0078*   ; get a key press in A
040112             0079*   GetKey:
040112             0080*       MosCall mos_sysvars         ; get ix pointer to sysvars
040112 3E 08       0001*M          ld a, function
040114 49 CF       0002*M          rst.lis $08
040116 DD 7E 18    0081*       ld a, (ix+sysvar_vkeydown)  ; get key state
040119 B7          0082*       or a                        ; key is down; wait for it to be released
04011A C2 12 01 04 0083*       jp nz, GetKey
04011E DD 7E 05    0084*       ld a, (ix+sysvar_keyascii)  ; load the ascii code of the key pressed
040121 DD 36 05 00 0085*       ld (ix+sysvar_keyascii), 0  ; clear it for next time
040125 B7          0086*       or a                        ; set z flag if key was pressed
040126 C9          0087*       ret
040127             0088*   
040127             0089*   ; Load a data table into the VDU
040127             0090*   ; IX = table address
040127             0091*   ; HL = entry prefix function (0 for none)
040127             0092*   ; D = entry stride
040127             0093*   ; E = entry count
040127             0094*   ; BC = free for use in prefix function
040127             0095*   LoadTable:
040127 CD 3F 01 04 0096*       call TablePrefix
04012B D5          0097*       push de
04012C             0098*   LoadTableLoop:
04012C DD 7E 00    0099*       ld a, (ix+0)
04012F             0100*       SendByteA
04012F 5B D7       0001*M          rst.lil $10
040131 DD 23       0101*       inc ix
040133 15          0102*       dec d
040134 C2 2C 01 04 0103*       jp nz, LoadTableLoop
040138 D1          0104*       pop de
040139 1D          0105*       dec e
04013A C2 27 01 04 0106*       jp nz, LoadTable
04013E C9          0107*       ret
04013F             0108*   
04013F             0109*   ; call table prefix function in HL, unless it is 0
04013F             0110*   ; HL = function pointer
04013F             0111*   TablePrefix:
04013F 7C          0112*       ld a, h
040140 B5          0113*       or l
040141 C8          0114*       ret z
040142 E9          0115*       jp (hl)
040143             0116*   
040143             0117*   ; load the C64 palette into agon palette
040143             0118*   LoadC64Palette:
040143 DD 21 70 05 0119*       ld ix, C64PaletteRGB
       04          
040148 21 56 01 04 0120*       ld hl, PalettePrefix
04014C 0E 00       0121*       ld c, 0
04014E 16 03       0122*       ld d, C64PaletteRGBStride
040150 1E 10       0123*       ld e, C64PaletteRGBCount
040152 C3 27 01 04 0124*       jp LoadTable
040156             0125*   
040156             0126*   PalettePrefix:
040156             0127*       SendByte VduSetPalette
040156 3E 13       0001*M          ld a, value
040158 5B D7       0002*M          rst.lil $10
04015A             0128*       SendByte c
04015A 79          0001*M          ld a, value
04015B 5B D7       0002*M          rst.lil $10
04015D             0129*       SendByte VduSetPaletteRGB
04015D 3E FF       0001*M          ld a, value
04015F 5B D7       0002*M          rst.lil $10
040161 0C          0130*       inc c
040162 C9          0131*       ret
040163             0132*   
040163             0133*   ; load the gradient table into custom chracters
040163             0134*   LoadGradient:
040163 DD 21 70 04 0135*       ld ix, Gradient
       04          
040168 21 76 01 04 0136*       ld hl, GradientPrefix
04016C 0E 80       0137*       ld c, GradientStart
04016E 16 08       0138*       ld d, GradientStride
040170 1E 20       0139*       ld e, GradientCount
040172 C3 27 01 04 0140*       jp LoadTable
040176             0141*   
040176             0142*   GradientPrefix:
040176             0143*       SendByte VduCustomChar
040176 3E 17       0001*M          ld a, value
040178 5B D7       0002*M          rst.lil $10
04017A             0144*       SendByte c
04017A 79          0001*M          ld a, value
04017B 5B D7       0002*M          rst.lil $10
04017D 0C          0145*       inc c
04017E C9          0146*       ret
04017F             0147*   
04017F             0148*   ; Send all the tiles in the screen buffer
04017F             0149*   SendScreenBuffer:
04017F             0150*       SendByte VduCursorHome
04017F 3E 1E       0001*M          ld a, value
040181 5B D7       0002*M          rst.lil $10
040183 21 4E 0D 04 0151*       ld hl, ScreenBuffer
040187 01 AF 04 00 0152*       ld bc, ScreenSize-1
04018B             0153*   SendScreenBufferLoop:
04018B 7E          0154*       ld a, (hl)
04018C C5          0155*       push bc
04018D E5          0156*       push hl
04018E CD A2 03 04 0157*       call ShowTile
040192 E1          0158*       pop hl
040193 C1          0159*       pop bc
040194 23          0160*       inc hl
040195 0B          0161*       dec bc
040196 78          0162*       ld a, b
040197 B1          0163*       or c
040198 C2 8B 01 04 0164*       jp nz, SendScreenBufferLoop
04019C C9          0165*       ret
04019D             0166*   
04019D             0167*   ; return the RGBA2222 equivalent of RGBA bytes
04019D             0168*   ; Params:
04019D             0169*   ;   HL = pointer to RGB888 format color table
04019D             0170*   ;   DE = pointer to RGBA2222 format buffer
04019D             0171*   ;   B = number of colors to convert
04019D             0172*   ; Return:
04019D             0173*   ;   A = RGBA2222 value
04019D             0174*   MakeRGBA2222:
04019D D5          0175*       push de
04019E 7E          0176*       ld a, (hl)
04019F 23          0177*       inc hl
0401A0 E6 C0       0178*       and %11000000
0401A2 57          0179*       ld d, a
0401A3 7E          0180*       ld a, (hl)
0401A4 23          0181*       inc hl
0401A5 E6 C0       0182*       and %11000000
0401A7 0F          0183*       rrca
0401A8 0F          0184*       rrca
0401A9 5F          0185*       ld e, a
0401AA 7E          0186*       ld a, (hl)
0401AB 23          0187*       inc hl
0401AC E6 C0       0188*       and %11000000
0401AE 0F          0189*       rrca
0401AF 0F          0190*       rrca
0401B0 0F          0191*       rrca
0401B1 0F          0192*       rrca
0401B2 B2          0193*       or d
0401B3 B3          0194*       or e
0401B4 F6 03       0195*       or %00000011
0401B6 D1          0196*       pop de
0401B7 12          0197*       ld (de), a
0401B8 13          0198*       inc de
0401B9 10 E2       0199*       djnz MakeRGBA2222
0401BB C9          0200*       ret
0401BC             0201*   
0401BC             0202*       macro MakePair fg, bg
0401BC             0203*       push hl
0401BC             0204*       ld e, fg
0401BC             0205*       add hl, de
0401BC             0206*       ld a, (hl)
0401BC             0207*       ld (iy+0), a
0401BC             0208*       pop hl
0401BC             0209*       push hl
0401BC             0210*       ld e, bg
0401BC             0211*       add hl, de
0401BC             0212*       ld a, (hl)
0401BC             0213*       ld (iy+8), a
0401BC             0214*       pop hl
0401BC             0215*       inc iy
0401BC             0216*       endmacro
0401BC             0217*   
0401BC             0218*   ; Generate foreground and background pairs from Plascii-style palette
0401BC             0219*   ; HL = pointer to RGBA2222 color definitions
0401BC             0220*   ; IX = pointer to palette
0401BC             0221*   ; IY = pointer to output buffer
0401BC             0222*   MakeColorPairs:
0401BC 11 00 00 00 0223*       ld de, 0
0401C0 06 04       0224*       ld b, 4
0401C2 3E FF       0225*       ld a, $ff
0401C4             0226*   MakeColorPairsAsc:             ; load colors into lookup in ascending order
0401C4             0227*       MakePair (ix+1), (ix+0)
0401C4 E5          0001*M      push hl
0401C5 DD 5E 01    0002*M      ld e, fg
0401C8 19          0003*M      add hl, de
0401C9 7E          0004*M      ld a, (hl)
0401CA FD 77 00    0005*M      ld (iy+0), a
0401CD E1          0006*M      pop hl
0401CE E5          0007*M      push hl
0401CF DD 5E 00    0008*M      ld e, bg
0401D2 19          0009*M      add hl, de
0401D3 7E          0010*M      ld a, (hl)
0401D4 FD 77 08    0011*M      ld (iy+8), a
0401D7 E1          0012*M      pop hl
0401D8 FD 23       0013*M      inc iy
0401DA DD 23       0228*       inc ix
0401DC 10 E6       0229*       djnz MakeColorPairsAsc
0401DE 06 04       0230*       ld b, 4
0401E0             0231*   MakeColorPairsDesc:            ; load colors into lookup in descending order
0401E0 DD 2B       0232*       dec ix
0401E2             0233*       MakePair (ix-1), (ix+0)
0401E2 E5          0001*M      push hl
0401E3 DD 5E FF    0002*M      ld e, fg
0401E6 19          0003*M      add hl, de
0401E7 7E          0004*M      ld a, (hl)
0401E8 FD 77 00    0005*M      ld (iy+0), a
0401EB E1          0006*M      pop hl
0401EC E5          0007*M      push hl
0401ED DD 5E 00    0008*M      ld e, bg
0401F0 19          0009*M      add hl, de
0401F1 7E          0010*M      ld a, (hl)
0401F2 FD 77 08    0011*M      ld (iy+8), a
0401F5 E1          0012*M      pop hl
0401F6 FD 23       0013*M      inc iy
0401F8 10 E6       0234*       djnz MakeColorPairsDesc
0401FA C9          0235*       ret
0401FB             0236*   
0401FB             0237*   MakeTiles:
0401FB F5          0238*       push af
0401FC EB          0239*       ex de, hl
0401FD 3E 20       0240*       ld a, 32
0401FF             0241*   MakeTileLoop:
0401FF CD 39 02 04 0242*       call MakeTile
040203 CD 0F 02 04 0243*       call SendTile
040207 3D          0244*       dec a
040208 C2 FF 01 04 0245*       jp nz, MakeTileLoop
04020C EB          0246*       ex de, hl
04020D F1          0247*       pop af
04020E C9          0248*       ret
04020F             0249*   
04020F             0250*   ; send the tile currently in the temp buffer to the vdu
04020F             0251*   ; DE = bitmap ID
04020F             0252*   SendTile:
04020F F5          0253*       push af
040210 E5          0254*       push hl
040211 C5          0255*       push bc
040212 D5          0256*       push de
040213 CD A3 02 04 0257*       call ClearBuffer
040217 21 63 02 04 0258*       ld hl, TempTileBuffer
04021B 01 40 00 00 0259*       ld bc, TempTileBufferLength
04021F CD BA 02 04 0260*       call SendBufferBlock
040223 CD E2 02 04 0261*       call SelectBitmapBuffer
040227 01 08 00 00 0262*       ld bc, 8
04022B 11 08 00 00 0263*       ld de, 8
04022F 26 01       0264*       ld h, VduBitmapFormatRGBA2222
040231 CD F5 02 04 0265*       call CreateBitmapFromBuffer
040235 D1          0266*       pop de
040236 C1          0267*       pop bc
040237 E1          0268*       pop hl
040238 F1          0269*       pop af
040239             0270*   
040239             0271*   ; make a color tile with specified foreground, and background colors
040239             0272*   ; HL = bitmap input buffer
040239             0273*   ; B = background color
040239             0274*   ; C = foreground color
040239             0275*   MakeTile:
040239 F5          0276*       push af
04023A E5          0277*       push hl
04023B D5          0278*       push de
04023C 3E 08       0279*       ld a, 8
04023E 11 63 02 04 0280*       ld de, TempTileBuffer
040242             0281*   MakeTileRowLoop:
040242 F5          0282*       push af
040243 7E          0283*       ld a, (hl)
040244 CD 53 02 04 0284*       call MakeTileRow
040248 F1          0285*       pop af
040249 23          0286*       inc hl
04024A 3D          0287*       dec a
04024B C2 42 02 04 0288*       jp nz, MakeTileRowLoop
04024F D1          0289*       pop de
040250 E1          0290*       pop hl
040251 F1          0291*       pop af
040252 C9          0292*       ret
040253             0293*   
040253             0294*   ; make a single row of bytes in a bitmap
040253             0295*   ; HL = output pointer
040253             0296*   ; A = bitmap
040253             0297*   ; B = background color in RGBA2222 format
040253             0298*   ; C = foreground color in RGBA2222 format
040253             0299*   MakeTileRow:
040253 16 08       0300*       ld d, 8
040255             0301*   MakeTileColLoop:
040255 87          0302*       add a, a
040256 70          0303*       ld (hl), b
040257 DA 5C 02 04 0304*       jp c, MakeTileNextCol
04025B 71          0305*       ld (hl), c
04025C             0306*   MakeTileNextCol:
04025C 23          0307*       inc hl
04025D 15          0308*       dec d
04025E C2 55 02 04 0309*       jp nz, MakeTileColLoop
040262 C9          0310*       ret
040263             0311*   TempTileBuffer:
040263 FF FF FF FF 0312*       defs 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
0402A3             0313*   TempTileBufferLength: equ $ - TempTileBuffer
0402A3             0314*   
0402A3             0315*   ; clear a buffer
0402A3             0316*   ; DE = buffer id
0402A3             0317*   ClearBuffer:
0402A3             0318*       SendByte VduCommand
0402A3 3E 17       0001*M          ld a, value
0402A5 5B D7       0002*M          rst.lil $10
0402A7             0319*       SendByte VduSystem
0402A7 3E 00       0001*M          ld a, value
0402A9 5B D7       0002*M          rst.lil $10
0402AB             0320*       SendByte VduBuffer
0402AB 3E A0       0001*M          ld a, value
0402AD 5B D7       0002*M          rst.lil $10
0402AF             0321*       SendByte e                  ; buffer id
0402AF 7B          0001*M          ld a, value
0402B0 5B D7       0002*M          rst.lil $10
0402B2             0322*       SendByte d
0402B2 7A          0001*M          ld a, value
0402B3 5B D7       0002*M          rst.lil $10
0402B5             0323*       SendByte VduBufferClear
0402B5 3E 02       0001*M          ld a, value
0402B7 5B D7       0002*M          rst.lil $10
0402B9 C9          0324*       ret
0402BA             0325*   
0402BA             0326*   ; send a block of data to a buffer
0402BA             0327*   ; DE = buffer id
0402BA             0328*   ; BC = buffer length
0402BA             0329*   ; HL = buffer data
0402BA             0330*   SendBufferBlock:
0402BA             0331*       SendByte VduCommand
0402BA 3E 17       0001*M          ld a, value
0402BC 5B D7       0002*M          rst.lil $10
0402BE             0332*       SendByte VduSystem
0402BE 3E 00       0001*M          ld a, value
0402C0 5B D7       0002*M          rst.lil $10
0402C2             0333*       SendByte VduBuffer
0402C2 3E A0       0001*M          ld a, value
0402C4 5B D7       0002*M          rst.lil $10
0402C6             0334*       SendByte e                  ; buffer id
0402C6 7B          0001*M          ld a, value
0402C7 5B D7       0002*M          rst.lil $10
0402C9             0335*       SendByte d
0402C9 7A          0001*M          ld a, value
0402CA 5B D7       0002*M          rst.lil $10
0402CC             0336*       SendByte VduBufferWriteBlock
0402CC 3E 00       0001*M          ld a, value
0402CE 5B D7       0002*M          rst.lil $10
0402D0             0337*       SendByte c                  ; length
0402D0 79          0001*M          ld a, value
0402D1 5B D7       0002*M          rst.lil $10
0402D3             0338*       SendByte b
0402D3 78          0001*M          ld a, value
0402D4 5B D7       0002*M          rst.lil $10
0402D6             0339*   SendBufferLoop:
0402D6             0340*       SendByte (hl)
0402D6 7E          0001*M          ld a, value
0402D7 5B D7       0002*M          rst.lil $10
0402D9 23          0341*       inc hl
0402DA 0B          0342*       dec bc
0402DB 78          0343*       ld a, b
0402DC B1          0344*       or c
0402DD C2 D6 02 04 0345*       jp nz, SendBufferLoop
0402E1 C9          0346*       ret
0402E2             0347*   
0402E2             0348*   ; select a bitmap using buffer ID
0402E2             0349*   ; DE = buffer id
0402E2             0350*   SelectBitmapBuffer:
0402E2             0351*       SendByte VduCommand
0402E2 3E 17       0001*M          ld a, value
0402E4 5B D7       0002*M          rst.lil $10
0402E6             0352*       SendByte VduBitmap
0402E6 3E 1B       0001*M          ld a, value
0402E8 5B D7       0002*M          rst.lil $10
0402EA             0353*       SendByte VduBitmapSelectBuffer
0402EA 3E 20       0001*M          ld a, value
0402EC 5B D7       0002*M          rst.lil $10
0402EE             0354*       SendByte e                  ; buffer id
0402EE 7B          0001*M          ld a, value
0402EF 5B D7       0002*M          rst.lil $10
0402F1             0355*       SendByte d
0402F1 7A          0001*M          ld a, value
0402F2 5B D7       0002*M          rst.lil $10
0402F4 C9          0356*       ret
0402F5             0357*   
0402F5             0358*   ; create selected bitmap from buffer
0402F5             0359*   ; BC = width
0402F5             0360*   ; DE = height
0402F5             0361*   ; L = format
0402F5             0362*   CreateBitmapFromBuffer:
0402F5 F5          0363*       push af
0402F6             0364*       SendByte VduCommand
0402F6 3E 17       0001*M          ld a, value
0402F8 5B D7       0002*M          rst.lil $10
0402FA             0365*       SendByte VduBitmap
0402FA 3E 1B       0001*M          ld a, value
0402FC 5B D7       0002*M          rst.lil $10
0402FE             0366*       SendByte VduBitmapCreateBuffer
0402FE 3E 21       0001*M          ld a, value
040300 5B D7       0002*M          rst.lil $10
040302             0367*       SendByte c                  ; width
040302 79          0001*M          ld a, value
040303 5B D7       0002*M          rst.lil $10
040305             0368*       SendByte b
040305 78          0001*M          ld a, value
040306 5B D7       0002*M          rst.lil $10
040308             0369*       SendByte e                  ; height
040308 7B          0001*M          ld a, value
040309 5B D7       0002*M          rst.lil $10
04030B             0370*       SendByte d
04030B 7A          0001*M          ld a, value
04030C 5B D7       0002*M          rst.lil $10
04030E             0371*       SendByte l                  ; format
04030E 7D          0001*M          ld a, value
04030F 5B D7       0002*M          rst.lil $10
040311 C9          0372*       ret
040312             0373*   
040312             0374*   ; map character number to bitmap using buffer id
040312             0375*   ; C = char
040312             0376*   ; DE = bitmap id
040312             0377*   MapCharToBitmap:
040312             0378*       SendByte VduCommand
040312 3E 17       0001*M          ld a, value
040314 5B D7       0002*M          rst.lil $10
040316             0379*       SendByte VduSystem
040316 3E 00       0001*M          ld a, value
040318 5B D7       0002*M          rst.lil $10
04031A             0380*       SendByte VduMapCharToBitmap
04031A 3E 92       0001*M          ld a, value
04031C 5B D7       0002*M          rst.lil $10
04031E             0381*       SendByte c                  ; character number
04031E 79          0001*M          ld a, value
04031F 5B D7       0002*M          rst.lil $10
040321             0382*       SendByte e                  ; bitmap id
040321 7B          0001*M          ld a, value
040322 5B D7       0002*M          rst.lil $10
040324             0383*       SendByte d
040324 7A          0001*M          ld a, value
040325 5B D7       0002*M          rst.lil $10
040327 C9          0384*       ret
040328             0385*   
040328             0386*   ; send a character, escaped if necessary
040328             0387*   ; A = char to send
040328             0388*   SendChar:
040328 FE 20       0389*       cp ' '                      ; check if it's a control char
04032A D2 34 03 04 0390*       jp nc, SendCharUnescaped    ; if not, send unescaped
04032E F5          0391*       push af
04032F             0392*       SendByte VduEscapeChar      ; if so, send escape command first
04032F 3E 1B       0001*M          ld a, value
040331 5B D7       0002*M          rst.lil $10
040333 F1          0393*       pop af
040334             0394*   SendCharUnescaped:
040334             0395*       SendByteA
040334 5B D7       0001*M          rst.lil $10
040336 C9          0396*       ret
040337             0397*   
040337             0398*   
040337             0399*   ; macro to allow loading colors in both ascending and descending order
040337             0400*       macro LoadColors pen, paper
040337             0401*           ld a, pen
040337             0402*           ld (de), a
040337             0403*           inc de
040337             0404*           ld a, paper
040337             0405*           add 128
040337             0406*           ld (de), a
040337             0407*           inc de
040337             0408*       endmacro
040337             0409*   
040337             0410*   ; Load a Plascii-style palette into the color lookup table
040337             0411*   ; HL = address of palette to load
040337             0412*   LoadColorTable:
040337 E5          0413*       push hl
040338 DD E1       0414*       pop ix                      ; palette address is now in ix
04033A 11 E1 03 04 0415*       ld de, ColorTable
04033E 06 04       0416*       ld b, 4
040340             0417*   LoadColorTableAsc:             ; load colors into lookup in ascending order
040340             0418*       LoadColors (ix+1), (ix+0)
040340 DD 7E 01    0001*M          ld a, pen
040343 12          0002*M          ld (de), a
040344 13          0003*M          inc de
040345 DD 7E 00    0004*M          ld a, paper
040348 C6 80       0005*M          add 128
04034A 12          0006*M          ld (de), a
04034B 13          0007*M          inc de
04034C DD 23       0419*       inc ix
04034E 10 F0       0420*       djnz LoadColorTableAsc
040350 06 04       0421*       ld b, 4
040352             0422*   LoadColorTableDesc:            ; load colors into lookup in descending order
040352             0423*       LoadColors (ix-1), (ix+0)
040352 DD 7E FF    0001*M          ld a, pen
040355 12          0002*M          ld (de), a
040356 13          0003*M          inc de
040357 DD 7E 00    0004*M          ld a, paper
04035A C6 80       0005*M          add 128
04035C 12          0006*M          ld (de), a
04035D 13          0007*M          inc de
04035E DD 2B       0424*       dec ix
040360 10 F0       0425*       djnz LoadColorTableDesc
040362 C9          0426*       ret
040363             0427*   
040363             0428*   ; Output gradients for all the palettes one after another to demonstrate them
040363             0429*   ShowPalettes:
040363 DD 21 B0 05 0430*       ld ix, ColorPalettes
       04          
040368 06 0D       0431*       ld b, ColorPaletteCount
04036A             0432*   ShowPalettesLoop:
04036A DD E5       0433*       push ix
04036C C5          0434*       push bc
04036D 3E 0D       0435*       ld a, ColorPaletteCount
04036F 90          0436*       sub b
040370 CD F9 03 04 0437*       call HexOut
040374 CD 51 00 04 0438*       call Space
040378 CD 37 03 04 0439*       call LoadColorTable
04037C CD 94 03 04 0440*       call ShowGradient
040380 CD 77 00 04 0441*       call DefaultTextColor
040384 CD 56 00 04 0442*       call NewLine
040388 C1          0443*       pop bc
040389 DD E1       0444*       pop ix
04038B 11 05 00 00 0445*       ld de, ColorPaletteStride
04038F DD 19       0446*       add ix, de
040391 10 D7       0447*       djnz ShowPalettesLoop
040393 C9          0448*       ret
040394             0449*   
040394             0450*   ; Display a gradient to showcase the current palette
040394             0451*   ShowGradient:
040394 3E 00       0452*       ld a, 0
040396             0453*   ShowGradientLoop:
040396 F5          0454*       push af
040397 CD A2 03 04 0455*       call ShowTile
04039B F1          0456*       pop af
04039C 3C          0457*       inc a
04039D C2 96 03 04 0458*       jp nz, ShowGradientLoop
0403A1 C9          0459*       ret
0403A2             0460*   
0403A2             0461*   ; Show the appropriate gradient tile with the appropriate pen and paper color
0403A2             0462*   ; A = tile number
0403A2             0463*   ShowTile:
0403A2 F5          0464*       push af
0403A3 E6 1F       0465*       and GradientCount - 1   ; bottom bits select the character
0403A5 C6 80       0466*       add GradientStart       ; plus starting character
0403A7 32 F6 03 04 0467*       ld (TileChar), a        ; save tile character
0403AB F1          0468*       pop af
0403AC E6 E0       0469*       and 256 - GradientCount ; top bits select the colors
0403AE 0F          0470*       rrca                    ; shift into correct positon
0403AF 0F          0471*       rrca
0403B0 0F          0472*       rrca
0403B1 0F          0473*       rrca
0403B2 21 F1 03 04 0474*       ld hl, CurrentColor
0403B6 BE          0475*       cp (hl)                 ; check if this tile is already using the current color
0403B7 C2 C2 03 04 0476*       jp nz, ShowTileColor    ; if not, output color control codes
0403BB 3A F6 03 04 0477*       ld a, (TileChar)        ; if so, just output the character
0403BF 49 D7       0478*       rst.lis $10
0403C1 C9          0479*       ret
0403C2             0480*   ShowTileColor:
0403C2 77          0481*       ld (hl), a              ; save the current logical color
0403C3 21 E1 03 04 0482*       ld hl, ColorTable       ; look up the pen and paper color based on logical color
0403C7 06 00       0483*       ld b, 0
0403C9 4F          0484*       ld c, a
0403CA 09          0485*       add hl, bc
0403CB 7E          0486*       ld a, (hl)
0403CC 32 F3 03 04 0487*       ld (TilePen), a         ; save them in the buffer
0403D0 23          0488*       inc hl
0403D1 7E          0489*       ld a, (hl)
0403D2 32 F5 03 04 0490*       ld (TilePaper), a
0403D6             0491*       SendBytes TileBuffer, TileBufferLength  ; send the tile buffer to the VDP
0403D6 21 F2 03 04 0001*M          ld hl, addr
0403DA 01 05 00 00 0002*M          ld bc, length
0403DE 5B DF       0003*M          rst.lil $18
0403E0 C9          0492*       ret
0403E1             0493*   
0403E1             0494*   ColorTable:
0403E1 FF FF FF FF 0495*       .ds 16
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
0403F1             0496*   CurrentColor:
0403F1 FF          0497*       .db $ff                 ; ff is never a valid logical color
0403F2             0498*   TileBuffer:
0403F2 11          0499*       .db VduTextColor
0403F3             0500*   TilePen:
0403F3 0F          0501*       .db 15                  ; white in default palette
0403F4 11          0502*       .db VduTextColor
0403F5             0503*   TilePaper:
0403F5 80          0504*       .db VduBackgroundColor  ; black in defualt palette
0403F6             0505*   TileChar:
0403F6 80          0506*       .db GradientStart
0403F7             0507*   TileBufferLength: equ $ - TileBuffer
0403F7             0508*   
0403F7             0509*   EnableInterrupt:
0403F7 C9          0510*       ret                     ; no interrupt needed on Agon
0403F8             0511*   
0403F8             0512*   ShowHelp:
0403F8 C9          0513*       ret                     ; figure out how to do this later
0403F9             0002        include "utility.inc"
0403F9             0001*   ; Miscellaneuous utility functions
0403F9             0002*   ; Copyright 2018-2024 J.B. Langston
0403F9             0003*   ;
0403F9             0004*   ; Permission is hereby granted, free of charge, to any person obtaining a
0403F9             0005*   ; copy of this software and associated documentation files (the "Software"),
0403F9             0006*   ; to deal in the Software without restriction, including without limitation
0403F9             0007*   ; the rights to use, copy, modify, merge, publish, distribute, sublicense,
0403F9             0008*   ; and/or sell copies of the Software, and to permit persons to whom the
0403F9             0009*   ; Software is furnished to do so, subject to the following conditions:
0403F9             0010*   ;
0403F9             0011*   ; The above copyright notice and this permission notice shall be included in
0403F9             0012*   ; all copies or substantial portions of the Software.
0403F9             0013*   ;
0403F9             0014*   ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
0403F9             0015*   ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
0403F9             0016*   ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
0403F9             0017*   ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
0403F9             0018*   ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
0403F9             0019*   ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
0403F9             0020*   ; DEALINGS IN THE SOFTWARE.
0403F9             0021*   
0403F9             0022*   
0403F9             0023*           ; jumps to target label if the specified value is in A
0403F9             0024*           ; can be used to build a concise dispatch routine...
0403F9             0025*           ;
0403F9             0026*           ; Dispatch:
0403F9             0027*           ;       JumpIf 0, Target0
0403F9             0028*           ;       JumpIf 1, Target1
0403F9             0029*           ;       ; ...
0403F9             0030*           ;       ret
0403F9             0031*           macro JumpIf value, target
0403F9             0032*           cp      value
0403F9             0033*           jp      z, target
0403F9             0034*           endmacro
0403F9             0035*   
0403F9             0036*   
0403F9             0037*   ; CharOut must be defined elsewhere for HexOut to work
0403F9             0038*   
0403F9             0039*   ; Output A in hexadecimal
0403F9             0040*   HexOut:
0403F9 F5          0041*           push    af
0403FA 1F          0042*           rra
0403FB 1F          0043*           rra
0403FC 1F          0044*           rra
0403FD 1F          0045*           rra
0403FE CD 0F 04 04 0046*           call    HexNybble
040402 CD 45 00 04 0047*           call    CharOut
040406 F1          0048*           pop     af
040407 CD 0F 04 04 0049*           call    HexNybble
04040B C3 45 00 04 0050*           jp      CharOut
04040F             0051*   
04040F             0052*   ; convert lower nybble of A to hex (also in A)
04040F             0053*   ; from http://map.grauw.nl/sources/external/z80bits.html#5.1
04040F             0054*   HexNybble:
04040F F6 F0       0055*           or      0f0h
040411 27          0056*           daa
040412 C6 A0       0057*           add     a, 0a0h
040414 CE 40       0058*           adc     a, 40h
040416 C9          0059*           ret
040417             0060*   
040417             0061*   ; RandomSeed sets the seed from four bytes in screen buffer data offset by refresh register.
040417             0062*   RandomSeed:
040417 21 4E 0D 04 0063*           ld      hl, ScreenBuffer
04041B ED 5F       0064*           ld      a, r
04041D 16 00       0065*           ld      d, 0
04041F 5F          0066*           ld      e, a
040420 19          0067*           add     hl, de
040421 06 04       0068*           ld      b, 4
040423 11 4D 04 04 0069*           ld      de, Seed1
040427             0070*   RandomSeedLoop:
040427 7E          0071*           ld      a, (hl)
040428 AD          0072*           xor     l
040429 12          0073*           ld      (de), a
04042A 23          0074*           inc     hl
04042B 13          0075*           inc     de
04042C 10 F9       0076*           djnz    RandomSeedLoop
04042E C9          0077*           ret
04042F             0078*   
04042F             0079*   ; RandomNumber generates a random number using combined LFSR/LCG PRNG with 16-bit seeds
04042F             0080*   ; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
04042F             0081*   RandomNumber:
04042F 2A 4D 04 04 0082*           ld      hl, (Seed1)
040433 44          0083*           ld      b, h
040434 4D          0084*           ld      c, l
040435 29          0085*           add     hl, hl
040436 29          0086*           add     hl, hl
040437 2C          0087*           inc     l
040438 09          0088*           add     hl, bc
040439 22 4D 04 04 0089*           ld      (Seed1), hl
04043D 2A 4F 04 04 0090*           ld      hl, (Seed2)
040441 29          0091*           add     hl, hl
040442 9F          0092*           sbc     a, a
040443 E6 2D       0093*           and     %00101101
040445 AD          0094*           xor     l
040446 6F          0095*           ld      l, a
040447 22 4F 04 04 0096*           ld      (Seed2), hl
04044B 09          0097*           add     hl, bc
04044C C9          0098*           ret
04044D             0099*   
04044D             0100*   Seed1:
04044D 00 00       0101*           defw    0
04044F             0102*   Seed2:
04044F 00 00       0103*           defw    0
040451             0104*   
040451             0105*   ; RandomSeries generates series of random numbers
040451             0106*   ; b = number of random numbers to generate
040451             0107*   ; c = mask for random numbers
040451             0108*   ; d = offset for random numbers
040451             0109*   RandomSeries:
040451 C5          0110*           push    bc
040452 E5          0111*           push    hl
040453 CD 2F 04 04 0112*           call    RandomNumber
040457 7D          0113*           ld      a, l
040458 B7          0114*           or      a
040459 E1          0115*           pop     hl
04045A C1          0116*           pop     bc
04045B FC 6B 04 04 0117*           call    m, RandomNeg
04045F F4 68 04 04 0118*           call    p, RandomPos
040463 77          0119*           ld      (hl), a
040464 23          0120*           inc     hl
040465 10 EA       0121*           djnz    RandomSeries
040467 C9          0122*           ret
040468             0123*   RandomPos:
040468 A1          0124*           and     c
040469 82          0125*           add     a, d
04046A C9          0126*           ret
04046B             0127*   RandomNeg:
04046B A1          0128*           and     c
04046C 82          0129*           add     a, d
04046D 2F          0130*           cpl
04046E 3C          0131*           inc     a
04046F C9          0132*           ret
040470             0003        include "data.inc"
040470             0001*   ; Data for plasma demo (sources credited individually below)
040470             0002*   
040470             0003*   ; Gradient patterns from Produkthandler Kom Her by Camelot: https://csdb.dk/release/?id=760
040470             0004*   Gradient:
040470 00 00 00 00 0005*       .db $00,$00,$00,$00,$00,$00,$00,$00
       00 00 00 00 
040478             0006*   GradientStride: equ $ - Gradient
040478             0007*       ;db $00,$00,$08,$00,$00,$00,$04,$00
040478 00 00 10 00 0008*       .db $00,$00,$10,$00,$40,$00,$04,$00
       40 00 04 00 
040480             0009*       ;db $00,$02,$10,$00,$40,$00,$04,$00
040480 00 02 10 00 0010*       .db $00,$02,$10,$00,$40,$00,$04,$20
       40 00 04 20 
040488             0011*       ;db $00,$02,$10,$02,$40,$00,$04,$20
040488 40 02 10 02 0012*       .db $40,$02,$10,$02,$40,$00,$04,$20
       40 00 04 20 
040490             0013*       ;db $40,$02,$10,$02,$40,$08,$04,$20
040490 40 02 10 02 0014*       .db $40,$02,$10,$02,$40,$08,$05,$20
       40 08 05 20 
040498             0015*       ;db $40,$02,$10,$02,$40,$88,$05,$20
040498 40 02 10 0A 0016*       .db $40,$02,$10,$0a,$40,$88,$05,$20
       40 88 05 20 
0404A0             0017*       ;db $44,$02,$10,$0a,$40,$88,$05,$20
0404A0 44 02 10 0A 0018*       .db $44,$02,$10,$0a,$41,$88,$05,$20
       41 88 05 20 
0404A8             0019*       ;db $44,$02,$50,$0a,$41,$88,$05,$20
0404A8 44 02 50 0A 0020*       .db $44,$02,$50,$0a,$41,$a8,$05,$20
       41 A8 05 20 
0404B0             0021*       ;db $44,$0a,$50,$0a,$41,$a8,$05,$20
0404B0 44 8A 50 0A 0022*       .db $44,$8a,$50,$0a,$41,$a8,$05,$20
       41 A8 05 20 
0404B8             0023*       ;db $44,$8a,$50,$0a,$41,$aa,$05,$20
0404B8 44 8A 50 0A 0024*       .db $44,$8a,$50,$0a,$51,$aa,$05,$20
       51 AA 05 20 
0404C0             0025*       ;db $44,$8a,$50,$0a,$51,$aa,$45,$20
0404C0 54 8A 50 0A 0026*       .db $54,$8a,$50,$0a,$51,$aa,$45,$20
       51 AA 45 20 
0404C8             0027*       ;db $54,$8a,$51,$0a,$51,$aa,$45,$20
0404C8 54 8A 51 0A 0028*       .db $54,$8a,$51,$0a,$51,$aa,$45,$28
       51 AA 45 28 
0404D0             0029*       ;db $54,$8a,$51,$2a,$51,$aa,$45,$28
0404D0 55 8A 51 2A 0030*       .db $55,$8a,$51,$2a,$51,$aa,$45,$28
       51 AA 45 28 
0404D8             0031*       ;db $55,$8a,$51,$2a,$55,$aa,$45,$28
0404D8 55 8A 51 2A 0032*       .db $55,$8a,$51,$2a,$55,$aa,$45,$2a
       55 AA 45 2A 
0404E0             0033*       ;db $55,$8a,$55,$2a,$55,$aa,$45,$2a
0404E0 55 8A 55 2A 0034*       .db $55,$8a,$55,$2a,$55,$aa,$45,$aa
       55 AA 45 AA 
0404E8             0035*       ;db $55,$8a,$55,$aa,$55,$aa,$45,$aa
0404E8 55 8A 55 AA 0036*       .db $55,$8a,$55,$aa,$55,$aa,$55,$aa
       55 AA 55 AA 
0404F0             0037*       ;db $55,$aa,$55,$aa,$55,$aa,$55,$aa
0404F0 55 AA 55 AA 0038*       .db $55,$aa,$55,$aa,$55,$aa,$55,$aa
       55 AA 55 AA 
0404F8             0039*       ;db $55,$aa,$55,$aa,$55,$aa,$75,$aa
0404F8 55 BA 55 AA 0040*       .db $55,$ba,$55,$aa,$55,$aa,$75,$aa
       55 AA 75 AA 
040500             0041*       ;db $55,$ba,$55,$aa,$d5,$aa,$75,$aa
040500 D5 BA 55 AA 0042*       .db $d5,$ba,$55,$aa,$d5,$aa,$75,$aa
       D5 AA 75 AA 
040508             0043*       ;db $d5,$ba,$55,$aa,$d5,$ae,$75,$aa
040508 D7 BA 55 AA 0044*       .db $d7,$ba,$55,$aa,$d5,$ae,$75,$aa
       D5 AE 75 AA 
040510             0045*       ;db $d7,$ba,$55,$ae,$d5,$ae,$75,$aa
040510 D7 BA 55 AE 0046*       .db $d7,$ba,$55,$ae,$d5,$ae,$75,$ab
       D5 AE 75 AB 
040518             0047*       ;db $d7,$ba,$55,$ae,$f5,$ae,$75,$ab
040518 DF BA 55 AE 0048*       .db $df,$ba,$55,$ae,$f5,$ae,$75,$ab
       F5 AE 75 AB 
040520             0049*       ;db $df,$ba,$55,$ae,$f5,$af,$75,$ab
040520 DF BA 55 AE 0050*       .db $df,$ba,$55,$ae,$f5,$af,$75,$bb
       F5 AF 75 BB 
040528             0051*       ;db $df,$fa,$55,$ae,$f5,$af,$75,$bb
040528 DF FA 55 BE 0052*       .db $df,$fa,$55,$be,$f5,$af,$75,$bb
       F5 AF 75 BB 
040530             0053*       ;db $df,$fa,$57,$be,$f5,$af,$75,$bb
040530 DF FA 57 BE 0054*       .db $df,$fa,$57,$be,$f5,$af,$f5,$bb
       F5 AF F5 BB 
040538             0055*       ;db $df,$fa,$57,$be,$f5,$af,$fd,$bb
040538 DF FA 77 BE 0056*       .db $df,$fa,$77,$be,$f5,$af,$fd,$bb
       F5 AF FD BB 
040540             0057*       ;db $df,$fa,$77,$be,$f5,$ef,$fd,$bb
040540 DF FA 77 BF 0058*       .db $df,$fa,$77,$bf,$f5,$ef,$fd,$bb
       F5 EF FD BB 
040548             0059*       ;db $df,$fa,$77,$bf,$f5,$ef,$fd,$bf
040548 DF FA 77 BF 0060*       .db $df,$fa,$77,$bf,$fd,$ef,$fd,$bf
       FD EF FD BF 
040550             0061*       ;db $df,$fa,$f7,$bf,$fd,$ef,$fd,$bf
040550 DF FB F7 BF 0062*       .db $df,$fb,$f7,$bf,$fd,$ef,$fd,$bf
       FD EF FD BF 
040558             0063*       ;db $df,$fb,$ff,$bf,$fd,$ef,$fd,$bf
040558 DF FB FF BF 0064*       .db $df,$fb,$ff,$bf,$fd,$ef,$fd,$ff
       FD EF FD FF 
040560             0065*       ;db $df,$fb,$ff,$bf,$ff,$ef,$fd,$ff
040560 FF FB FF BF 0066*       .db $ff,$fb,$ff,$bf,$ff,$ef,$fd,$ff
       FF EF FD FF 
040568             0067*       ;db $ff,$fb,$ff,$bf,$ff,$ef,$ff,$ff
040568 FF FB FF FF 0068*       .db $ff,$fb,$ff,$ff,$ff,$ef,$ff,$ff
       FF EF FF FF 
040570             0069*       ;db $ff,$ff,$ff,$ff,$ff,$ef,$ff,$ff
040570             0070*   GradientLength: equ $ - Gradient
040570             0071*   GradientCount: equ GradientLength / GradientStride
040570             0072*   GradientStart: equ 128
040570             0073*   
040570             0074*   ; C64 Palette RGB values from https://www.c64-wiki.com/wiki/Color
040570             0075*   C64PaletteRGB:
040570 00 00 00    0076*       .db $00,$00,$00    ; black
040573             0077*   C64PaletteRGBStride:   equ $ - C64PaletteRGB
040573 FF FF FF    0078*       .db $ff,$ff,$ff    ; white
040576 88 00 00    0079*       .db $88,$00,$00    ; red
040579 AA FF EE    0080*       .db $aa,$ff,$ee    ; cyan
04057C CC 44 CC    0081*       .db $cc,$44,$cc    ; purple
04057F 00 CC 55    0082*       .db $00,$cc,$55    ; green
040582 00 00 AA    0083*       .db $00,$00,$aa    ; blue
040585 EE EE 77    0084*       .db $ee,$ee,$77    ; yellow
040588 DD 88 55    0085*       .db $dd,$88,$55    ; orange
04058B 66 44 00    0086*       .db $66,$44,$00    ; brown
04058E FF 77 77    0087*       .db $ff,$77,$77    ; light red
040591 33 33 33    0088*       .db $33,$33,$33    ; dark grey
040594 77 77 77    0089*       .db $77,$77,$77    ; grey
040597 AA FF 66    0090*       .db $aa,$ff,$66    ; light green
04059A 00 88 FF    0091*       .db $00,$88,$ff    ; light blue
04059D BB BB BB    0092*       .db $bb,$bb,$bb    ; light grey
0405A0             0093*   C64PaletteRGBLength: equ $ - C64PaletteRGB
0405A0             0094*   C64PaletteRGBCount: equ C64PaletteRGBLength / C64PaletteRGBStride
0405A0             0095*   
0405A0             0096*   ; mapping of C64 colors to nearest approximation on TMS9918A
0405A0             0097*   C64PaletteTMS:
0405A0 01          0098*       .db $01
0405A1 0F          0099*       .db $0f     ; white
0405A2 06          0100*       .db $06     ; red
0405A3 07          0101*       .db $07     ; cyan
0405A4 0D          0102*       .db $0d     ; purple
0405A5 02          0103*       .db $02     ; green -> medium green
0405A6 04          0104*       .db $04     ; blue
0405A7 0B          0105*       .db $0b     ; yellow
0405A8 09          0106*       .db $09     ; orange -> light red
0405A9 0A          0107*       .db $0a     ; brown -> dark yellow
0405AA 08          0108*       .db $08     ; light red -> medium red
0405AB 01          0109*       .db $01     ; dark grey -> black
0405AC 0E          0110*       .db $0e     ; grey
0405AD 03          0111*       .db $03     ; light green
0405AE 05          0112*       .db $05     ; light blue
0405AF 0E          0113*       .db $0e     ; light grey -> grey
0405B0             0114*   
0405B0             0115*   ; Predefined palettes from Plascii Petsma: https://csdb.dk/release/?id=159933
0405B0             0116*   ColorPalettes:
0405B0 00 0B 0C 0F 0117*       .db $0,$b,$c,$f,$1
       01          
0405B5             0118*   ColorPaletteStride: equ $ - ColorPalettes
0405B5 00 00 00 05 0119*       .db $0,$0,$0,$5,$5
       05          
0405BA 0D 03 0E 04 0120*       .db $d,$3,$e,$4,$2
       02          
0405BF 09 02 04 0B 0121*       .db $9,$2,$4,$b,$6
       06          
0405C4 06 0B 08 02 0122*       .db $6,$b,$8,$2,$2
       02          
0405C9 0A 0C 0E 05 0123*       .db $a,$c,$e,$5,$5
       05          
0405CE 06 0B 08 0A 0124*       .db $6,$b,$8,$a,$7
       07          
0405D3 0D 03 0C 08 0125*       .db $d,$3,$c,$8,$2
       02          
0405D8 01 03 0E 04 0126*       .db $1,$3,$e,$4,$2
       02          
0405DD 0D 05 0B 04 0127*       .db $d,$5,$b,$4,$a
       0A          
0405E2 03 0E 0B 08 0128*       .db $3,$e,$b,$8,$a
       0A          
0405E7 0A 04 06 0E 0129*       .db $a,$4,$6,$e,$3
       03          
0405EC 0A 08 09 0B 0130*       .db $a,$8,$9,$b,$e
       0E          
0405F1             0131*   ColorPaletteEnd:    equ $
0405F1             0132*   ColorPaletteLength: equ $ - ColorPalettes
0405F1             0133*   ColorPaletteCount:  equ ColorPaletteLength / ColorPaletteStride
0405F1             0134*   
0405F1             0135*   ; Pre-defined plasma parameters from Plascii Petsma: https://csdb.dk/release/?id=159933
0405F1             0136*   PlasmaParamList:
0405F1 FA 05 03 FA 0137*           defb    $fa,$05,$03,$fa,$07,$04,$fe,$fe
       07 04 FE FE 
0405F9 FE 01 FE 02 0138*           defb    $fe,$01,$fe,$02,$03,$ff,$02,$02
       03 FF 02 02 
040601 5E E8 EB 32 0139*           defb    $5e,$e8,$eb,$32,$69,$4f,$0a,$41
       69 4F 0A 41 
040609 FE FC       0140*           defb    $fe,$fc
04060B 06 07       0141*           defb    $06,$07
04060D FF          0142*           defb    $ff
04060E 01          0143*           defb    $01
04060F             0144*   
04060F 04 05 FC 02 0145*           defb    $04,$05,$fc,$02,$fc,$03,$02,$01
       FC 03 02 01 
040617 00 01 03 FD 0146*           defb    $00,$01,$03,$fd,$02,$fd,$fe,$00
       02 FD FE 00 
04061F 51 A1 55 C1 0147*           defb    $51,$a1,$55,$c1,$0d,$5a,$dd,$26
       0D 5A DD 26 
040627 FE FD       0148*           defb    $fe,$fd
040629 08 08       0149*           defb    $08,$08
04062B F8          0150*           defb    $f8
04062C 06          0151*           defb    $06
04062D             0152*   
04062D F9 06 FE FA 0153*           defb    $f9,$06,$fe,$fa,$fa,$00,$07,$fb
       FA 00 07 FB 
040635 02 01 02 03 0154*           defb    $02,$01,$02,$03,$03,$00,$fd,$00
       03 00 FD 00 
04063D 34 85 A6 11 0155*           defb    $34,$85,$a6,$11,$89,$2b,$fa,$9c
       89 2B FA 9C 
040645 FC FB       0156*           defb    $fc,$fb
040647 09 08       0157*           defb    $09,$08
040649 FA          0158*           defb    $fa
04064A 09          0159*           defb    $09
04064B             0160*   
04064B 00 01 03 00 0161*           defb    $00,$01,$03,$00,$01,$ff,$04,$fc
       01 FF 04 FC 
040653 01 FF 03 FE 0162*           defb    $01,$ff,$03,$fe,$fe,$03,$02,$02
       FE 03 02 02 
04065B F3 02 0B 89 0163*           defb    $f3,$02,$0b,$89,$8c,$d3,$23,$aa
       8C D3 23 AA 
040663 FE 01       0164*           defb    $fe,$01
040665 07 07       0165*           defb    $07,$07
040667 08          0166*           defb    $08
040668 0A          0167*           defb    $0a
040669             0168*   
040669 04 04 04 FC 0169*           defb    $04,$04,$04,$fc,$fd,$04,$ff,$fc
       FD 04 FF FC 
040671 01 02 02 01 0170*           defb    $01,$02,$02,$01,$ff,$00,$ff,$01
       FF 00 FF 01 
040679 3A 21 53 93 0171*           defb    $3a,$21,$53,$93,$39,$b7,$26,$99
       39 B7 26 99 
040681 FD FE       0172*           defb    $fd,$fe
040683 05 06       0173*           defb    $05,$06
040685 03          0174*           defb    $03
040686 04          0175*           defb    $04
040687             0176*   
040687 FD FD FD 02 0177*           defb    $fd,$fd,$fd,$02,$04,$00,$fd,$02
       04 00 FD 02 
04068F 03 02 FD 02 0178*           defb    $03,$02,$fd,$02,$03,$fe,$ff,$ff
       03 FE FF FF 
040697 BC 99 5D 2F 0179*           defb    $bc,$99,$5d,$2f,$e6,$16,$af,$0e
       E6 16 AF 0E 
04069F FD FF       0180*           defb    $fd,$ff
0406A1 07 07       0181*           defb    $07,$07
0406A3 F5          0182*           defb    $f5
0406A4 07          0183*           defb    $07
0406A5             0184*   
0406A5 FC 00 00 FF 0185*           defb    $fc,$00,$00,$ff,$04,$04,$00,$01
       04 04 00 01 
0406AD FD 03 00 02 0186*           defb    $fd,$03,$00,$02,$00,$03,$02,$03
       00 03 02 03 
0406B5 30 C7 07 60 0187*           defb    $30,$c7,$07,$60,$36,$2b,$e8,$ec
       36 2B E8 EC 
0406BD FF FE       0188*           defb    $ff,$fe
0406BF 09 03       0189*           defb    $09,$03
0406C1 F8          0190*           defb    $f8
0406C2 05          0191*           defb    $05
0406C3             0192*   
0406C3 FD FC FE 00 0193*           defb    $fd,$fc,$fe,$00,$00,$04,$fe,$01
       00 04 FE 01 
0406CB 03 03 FE 02 0194*           defb    $03,$03,$fe,$02,$00,$03,$fe,$00
       00 03 FE 00 
0406D3 21 D7 34 1B 0195*           defb    $21,$d7,$34,$1b,$5d,$eb,$8e,$7d
       5D EB 8E 7D 
0406DB FD FF       0196*           defb    $fd,$ff
0406DD 0A 03       0197*           defb    $0a,$03
0406DF FD          0198*           defb    $fd
0406E0 03          0199*           defb    $03
0406E1             0200*   
0406E1 FE 00 FF 01 0201*           defb    $fe,$00,$ff,$01,$04,$02,$fe,$fd
       04 02 FE FD 
0406E9 02 01 FE 01 0202*           defb    $02,$01,$fe,$01,$03,$ff,$03,$ff
       03 FF 03 FF 
0406F1 0B 0F EA 8C 0203*           defb    $0b,$0f,$ea,$8c,$e0,$f8,$05,$0e
       E0 F8 05 0E 
0406F9 FC FD       0204*           defb    $fc,$fd
0406FB 07 06       0205*           defb    $07,$06
0406FD F8          0206*           defb    $f8
0406FE 0C          0207*           defb    $0c
0406FF             0208*   
0406FF 33 04 34 FC 0209*           defb    $33,$04,$34,$fc,$dd,$24,$cf,$7c
       DD 24 CF 7C 
040707 C1 73 02 31 0210*           defb    $c1,$73,$02,$31,$fe,$a0,$ee,$01
       FE A0 EE 01 
04070F 3A 21 53 93 0211*           defb    $3a,$21,$53,$93,$39,$b7,$26,$99
       39 B7 26 99 
040717 00 00       0212*           defb    $00,$00
040719 04 01       0213*           defb    $04,$01
04071B FD          0214*           defb    $fd
04071C 00          0215*           defb    $00
04071D             0216*   
04071D FF 00 01 FF 0217*           defb    $ff,$00,$01,$ff,$02,$fe,$00,$02
       02 FE 00 02 
040725 FF 02 01 02 0218*           defb    $ff,$02,$01,$02,$fe,$01,$00,$00
       FE 01 00 00 
04072D 1D BB C5 A3 0219*           defb    $1d,$bb,$c5,$a3,$ab,$6c,$ed,$a6
       AB 6C ED A6 
040735 FD FE       0220*           defb    $fd,$fe
040737 03 03       0221*           defb    $03,$03
040739 F8          0222*           defb    $f8
04073A 08          0223*           defb    $08
04073B             0224*   
04073B 02 03 FD FD 0225*           defb    $02,$03,$fd,$fd,$01,$fc,$fd,$00
       01 FC FD 00 
040743 01 03 FD FE 0226*           defb    $01,$03,$fd,$fe,$fe,$03,$00,$00
       FE 03 00 00 
04074B 69 AC 3B C1 0227*           defb    $69,$ac,$3b,$c1,$fe,$21,$37,$84
       FE 21 37 84 
040753 FC FD       0228*           defb    $fc,$fd
040755 06 05       0229*           defb    $06,$05
040757 FA          0230*           defb    $fa
040758 0B          0231*           defb    $0b
040759             0232*   LastPlasmaParam:
040759             0233*   
040759             0234*   ; Sine table contains pre-computed sine values converted to 8-bit integers.
040759             0235*   ; Real sine values from -1 to 1 correspond to unsigned integers from 0 to 255.
040759             0236*   ; The first quarter of the period is pre-computed using python script:
040759             0237*   
040759             0238*   ; #!/usr/bin/python3
040759             0239*   ; import math
040759             0240*   ; amp = 0xfe
040759             0241*   ; for i in range(0, 0x40):
040759             0242*   ;     sin = 2 + amp / 2 + amp * 0.499999 * math.sin(i / (0x100 / 2 / math.pi))
040759             0243*   ;     if i & 7 == 0:
040759             0244*   ;         print("defb    ", end="")
040759             0245*   ;     print(hex(int(sin)).replace("0x", "$"), end="\n" if i & 7 == 7 else ",")
040759             0246*   
040759             0247*   SineSrc:
040759 81 84 87 8A 0248*           defb    $81,$84,$87,$8a,$8d,$90,$93,$96
       8D 90 93 96 
040761 99 9C 9F A2 0249*           defb    $99,$9c,$9f,$a2,$a5,$a8,$ab,$ae
       A5 A8 AB AE 
040769 B1 B4 B7 BA 0250*           defb    $b1,$b4,$b7,$ba,$bc,$bf,$c2,$c4
       BC BF C2 C4 
040771 C7 CA CC CF 0251*           defb    $c7,$ca,$cc,$cf,$d1,$d3,$d6,$d8
       D1 D3 D6 D8 
040779 DA DC DF E1 0252*           defb    $da,$dc,$df,$e1,$e3,$e5,$e7,$e8
       E3 E5 E7 E8 
040781 EA EC ED EF 0253*           defb    $ea,$ec,$ed,$ef,$f1,$f2,$f3,$f5
       F1 F2 F3 F5 
040789 F6 F7 F8 F9 0254*           defb    $f6,$f7,$f8,$f9,$fa,$fb,$fc,$fc
       FA FB FC FC 
040791 FD FE FE FF 0255*           defb    $fd,$fe,$fe,$ff,$ff,$ff,$ff,$ff
       FF FF FF FF 
040799             0004    
040799             0005    Main:
040799 CD D0 07 04 0006        call Init
04079D CD FB 07 04 0007        call RGBA2222Test
0407A1 CD 3E 08 04 0008        call ColorPairTest
0407A5 C3 EB 00 04 0009        jp Exit
0407A9             0010    
0407A9             0011    Banner:
0407A9 50 6C 61 73 0012        defb "Plasma Test Suite by J.B. Langston", CR, LF, CR, LF, EOS
       6D 61 20 54 
       65 73 74 20 
       53 75 69 74 
       65 20 62 79 
       20 4A 2E 42 
       2E 20 4C 61 
       6E 67 73 74 
       6F 6E 0D 0A 
       0D 0A 00    
0407D0             0013    
0407D0             0014    Init:
0407D0 0E 00       0015        ld c, 0                 ; 640x480 16 colors
0407D2 CD 5F 00 04 0016        call VdpMode
0407D6 CD 67 00 04 0017        call ClearScreen
0407DA 21 A9 07 04 0018        ld hl, Banner
0407DE CD 48 00 04 0019        call StringOut
0407E2 C9          0020        ret
0407E3             0021    
0407E3             0022    RGBA2222TestMessage:
0407E3 52 47 42 41 0023        defb "RGBA2222 Conversion: ", CR, LF, EOS
       32 32 32 32 
       20 43 6F 6E 
       76 65 72 73 
       69 6F 6E 3A 
       20 0D 0A 00 
0407FB             0024    
0407FB             0025    RGBA2222Test:
0407FB 21 E3 07 04 0026        ld hl, RGBA2222TestMessage
0407FF CD 48 00 04 0027        call StringOut
040803 21 70 05 04 0028        ld hl, C64PaletteRGB
040807 06 10       0029        ld b, C64PaletteRGBCount
040809 11 7E 08 04 0030        ld de, RGBA2222Buffer
04080D CD 9D 01 04 0031        call MakeRGBA2222
040811 21 7E 08 04 0032        ld hl, RGBA2222Buffer
040815 06 10       0033        ld b, RGBA2222BufferLength
040817 CD 71 08 04 0034        call HexBytesOut
04081B CD 56 00 04 0035        call NewLine
04081F CD 56 00 04 0036        call NewLine
040823 C9          0037        ret
040824             0038    
040824             0039    ColorPairTestMessage:
040824 43 6F 6C 6F 0040        defb "Color Pairs for Palette", CR, LF, EOS
       72 20 50 61 
       69 72 73 20 
       66 6F 72 20 
       50 61 6C 65 
       74 74 65 0D 
       0A 00       
04083E             0041    
04083E             0042    ColorPairTest:
04083E 21 24 08 04 0043        ld hl, ColorPairTestMessage
040842 CD 48 00 04 0044        call StringOut
040846 21 7E 08 04 0045        ld hl, RGBA2222Buffer
04084A DD 21 B5 05 0046        ld ix, ColorPalettes+ColorPaletteStride
       04          
04084F FD 21 8E 08 0047        ld iy, ColorPairBuffer
       04          
040854 CD BC 01 04 0048        call MakeColorPairs
040858 21 8E 08 04 0049        ld hl, ColorPairBuffer
04085C 06 08       0050        ld b, 8
04085E CD 71 08 04 0051        call HexBytesOut
040862 CD 56 00 04 0052        call NewLine
040866 06 08       0053        ld b, 8
040868 CD 71 08 04 0054        call HexBytesOut
04086C CD 56 00 04 0055        call NewLine
040870 C9          0056        ret
040871             0057    
040871             0058    HexBytesOut:
040871 7E          0059        ld a, (hl)
040872 CD F9 03 04 0060        call HexOut
040876 CD 51 00 04 0061        call Space
04087A 23          0062        inc hl
04087B 10 F4       0063        djnz HexBytesOut
04087D C9          0064        ret
04087E             0065    
04087E             0066    RGBA2222Buffer:
04087E FF FF FF FF 0067        defs 16
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
04088E             0068    RGBA2222BufferLength: equ $ - RGBA2222Buffer
04088E             0069    
04088E             0070    ColorPairBuffer:
04088E FF FF FF FF 0071        defs 16
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
04089E             0072    
04089E             0073    ScreenBuffer:   equ $ + ScreenSize
