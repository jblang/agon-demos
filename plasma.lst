PC     Output      Line
040000             0001    ; Plasma Effect for Z80
040000             0002    ; Copyright 2018-2024 J.B. Langston
040000             0003    ;
040000             0004    ; Permission is hereby granted, free of charge, to any person obtaining a
040000             0005    ; copy of this software and associated documentation files (the "Software"),
040000             0006    ; to deal in the Software without restriction, including without limitation
040000             0007    ; the rights to use, copy, modify, merge, publish, distribute, sublicense,
040000             0008    ; and/or sell copies of the Software, and to permit persons to whom the
040000             0009    ; Software is furnished to do so, subject to the following conditions:
040000             0010    ;
040000             0011    ; The above copyright notice and this permission notice shall be included in
040000             0012    ; all copies or substantial portions of the Software.
040000             0013    ;
040000             0014    ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
040000             0015    ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
040000             0016    ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
040000             0017    ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
040000             0018    ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
040000             0019    ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
040000             0020    ; DEALINGS IN THE SOFTWARE.
040000             0021    
040000             0022    ; =============================================================================
040000             0023    
040000             0024    ; Ported from Plascii Petsma for C64 by Camelot: https://csdb.dk/release/?id=159933
040000             0025    
040000             0026    ; Plascii Petsma by Cruzer/Camelot has one of the nicest looking plasma effects I've seen for
040000             0027    ; the C64. Since he included the source code, I was able to port it to the Z80 and TMS9918.
040000             0028    
040000             0029    ; I have added the following interactive features of my own:
040000             0030    ; - change the palette independent of the effect
040000             0031    ; - hold a particular effect on screen indefinitely
040000             0032    ; - switch immediately to a new effect
040000             0033    ; - runtime generation of random effects
040000             0034    ; - adjust parameters to customize an effect
040000             0035    
040000             0036    ; Before diving into this code, it helps to understand how plasma effects work in general.
040000             0037    ; Rather than write another explanation when others have already done it well, I'll refer
040000             0038    ; you to this one: https://lodev.org/cgtutor/plasma.html.
040000             0039    
040000             0040    ; =============================================================================
040000             0041    ; uncomment ONLY ONE of these includes depending on the platform:
040000             0042    
040000             0043            include "agon.inc"
040000             0001*   ; VDP and MOS-specific routines for Plasma Generator on AgonLight, Agon Console8
040000             0002*   ; Copyright 2018-2024 J.B. Langston
040000             0003*   ;
040000             0004*   ; Permission is hereby granted, free of charge, to any person obtaining a
040000             0005*   ; copy of this software and associated documentation files (the "Software"),
040000             0006*   ; to deal in the Software without restriction, including without limitation
040000             0007*   ; the rights to use, copy, modify, merge, publish, distribute, sublicense,
040000             0008*   ; and/or sell copies of the Software, and to permit persons to whom the
040000             0009*   ; Software is furnished to do so, subject to the following conditions:
040000             0010*   ;
040000             0011*   ; The above copyright notice and this permission notice shall be included in
040000             0012*   ; all copies or substantial portions of the Software.
040000             0013*   ;
040000             0014*   ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
040000             0015*   ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
040000             0016*   ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
040000             0017*   ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
040000             0018*   ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
040000             0019*   ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
040000             0020*   ; DEALINGS IN THE SOFTWARE.
040000             0021*   
040000             0022*   ScreenWidth:    equ 40
040000             0023*   ScreenHeight:   equ 30
040000             0024*   ScreenSize:     equ ScreenWidth*ScreenHeight
040000             0025*   PageMask:       equ $ffff00                     ; 24-bit addresses
040000             0026*   
040000             0027*   ; convenience macros
040000             0028*   
040000             0029*       macro DefPointer addr
040000             0030*           .dl addr
040000             0031*       endmacro
040000             0032*   
040000             0033*   ; executable preamble
040000             0034*   
040000             0035*       .assume adl=1                           ; ez80 ADL memory mode
040000             0036*       .org $40000                             ; load code here
040000             0037*   
040000 C3 5A 02 04 0038*       jp Entry                                ; jump to start of code
040004             0039*   
040004 FF FF FF FF 0040*       .align 64                               ; MOS header
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53 00 0041*       .db "MOS",0,1
       01          
040045             0042*   
040045             0043*       include "mos.inc"
040045             0001**  ; License: https://github.com/AgonConsole8/agon-mos/blob/main/LICENSE
040045             0002**  ; Copyright (c) 2022 Dean Belfield
040045             0003**  ;
040045             0004**  ; Permission is hereby granted, free of charge, to any person obtaining a copy
040045             0005**  ; of this software and associated documentation files (the "Software"), to deal
040045             0006**  ; in the Software without restriction, including without limitation the rights
040045             0007**  ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
040045             0008**  ; copies of the Software, and to permit persons to whom the Software is
040045             0009**  ; furnished to do so, subject to the following conditions:
040045             0010**  ;
040045             0011**  ; The above copyright notice and this permission notice shall be included in all
040045             0012**  ; copies or substantial portions of the Software.
040045             0013**  ;
040045             0014**  ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
040045             0015**  ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
040045             0016**  ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
040045             0017**  ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
040045             0018**  ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
040045             0019**  ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
040045             0020**  ; SOFTWARE.
040045             0021**  
040045             0022**  ; Taken from https://github.com/AgonConsole8/agon-mos/blob/main/src/mos_api.inc on 2024-04-16
040045             0023**  
040045             0024**  ;
040045             0025**  ; Title:        AGON MOS - API for user projects
040045             0026**  ; Author:        Dean Belfield
040045             0027**  ; Created:        03/08/2022
040045             0028**  ; Last Updated:        11/11/2023
040045             0029**  ;
040045             0030**  ; Modinfo:
040045             0031**  ; 05/08/2022:        Added mos_feof
040045             0032**  ; 09/08/2022:        Added system variables: cursorX, cursorY
040045             0033**  ; 18/08/2022:        Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0034**  ; 05/09/2022:        Added mos_ren, vdp_pflag_mode
040045             0035**  ; 24/09/2022:        Added mos_getError, mos_mkdir
040045             0036**  ; 13/10/2022:        Added mos_oscli
040045             0037**  ; 23/02/2023:        Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0038**  ; 04/03/2023:        Added sysvar_scrpixelIndex
040045             0039**  ; 08/03/2023:        Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0040**  ; 15/03/2023:        Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0041**  ; 21/03/2023:        Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0042**  ; 22/03/2023:        The VDP commands are now indexed from 0x80
040045             0043**  ; 29/03/2023:        Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0044**  ; 13/04/2023:        Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0045**  ; 15/04/2023:        Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0046**  ; 19/05/2023:        Added sysvar_scrMode
040045             0047**  ; 05/06/2023:        Added sysvar_rtcEnable
040045             0048**  ; 03/08/2023:        Added mos_setkbvector
040045             0049**  ; 10/08/2023:        Added mos_getkbmap
040045             0050**  ; 11/11/2023:        Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040045             0051**  
040045             0052**  ; Macro for calling the API
040045             0053**  ; Parameters:
040045             0054**  ; - function: One of the function numbers listed above
040045             0055**      macro MosCall function
040045             0056**          ld a, function
040045             0057**          rst.lis $08
040045             0058**      endmacro
040045             0059**  
040045             0060**  ; VDP control (VDU 23, 0, n)
040045             0061**  ;
040045             0062**  vdp_gp:                 EQU        80h
040045             0063**  vdp_keycode:            EQU        81h
040045             0064**  vdp_cursor:             EQU        82h
040045             0065**  vdp_scrchar:            EQU        83h
040045             0066**  vdp_scrpixel:           EQU        84h
040045             0067**  vdp_audio:              EQU        85h
040045             0068**  vdp_mode:               EQU        86h
040045             0069**  vdp_rtc:                EQU        87h
040045             0070**  vdp_keystate:           EQU        88h
040045             0071**  vdp_logicalcoords:      EQU        C0h
040045             0072**  vdp_terminalmode:       EQU        FFh
040045             0073**  
040045             0074**  ; MOS high level functions
040045             0075**  ;
040045             0076**  mos_getkey:             EQU        00h
040045             0077**  mos_load:               EQU        01h
040045             0078**  mos_save:               EQU        02h
040045             0079**  mos_cd:                 EQU        03h
040045             0080**  mos_dir:                EQU        04h
040045             0081**  mos_del:                EQU        05h
040045             0082**  mos_ren:                EQU        06h
040045             0083**  mos_mkdir:              EQU        07h
040045             0084**  mos_sysvars:            EQU        08h
040045             0085**  mos_editline:           EQU        09h
040045             0086**  mos_fopen:              EQU        0Ah
040045             0087**  mos_fclose:             EQU        0Bh
040045             0088**  mos_fgetc:              EQU        0Ch
040045             0089**  mos_fputc:              EQU        0Dh
040045             0090**  mos_feof:               EQU        0Eh
040045             0091**  mos_getError:           EQU        0Fh
040045             0092**  mos_oscli:              EQU        10h
040045             0093**  mos_copy:               EQU        11h
040045             0094**  mos_getrtc:             EQU        12h
040045             0095**  mos_setrtc:             EQU        13h
040045             0096**  mos_setintvector:       EQU        14h
040045             0097**  mos_uopen:              EQU        15h
040045             0098**  mos_uclose:             EQU        16h
040045             0099**  mos_ugetc:              EQU        17h
040045             0100**  mos_uputc:              EQU        18h
040045             0101**  mos_getfil:             EQU        19h
040045             0102**  mos_fread:              EQU        1Ah
040045             0103**  mos_fwrite:             EQU        1Bh
040045             0104**  mos_flseek:             EQU        1Ch
040045             0105**  mos_setkbvector:        EQU        1Dh
040045             0106**  mos_getkbmap:           EQU        1Eh
040045             0107**  mos_i2c_open:           EQU        1Fh
040045             0108**  mos_i2c_close:          EQU        20h
040045             0109**  mos_i2c_write:          EQU        21h
040045             0110**  mos_i2c_read:           EQU        22h
040045             0111**  
040045             0112**  
040045             0113**  ; FatFS file access functions
040045             0114**  ;
040045             0115**  ffs_fopen:              EQU        80h
040045             0116**  ffs_fclose:             EQU        81h
040045             0117**  ffs_fread:              EQU        82h
040045             0118**  ffs_fwrite:             EQU        83h
040045             0119**  ffs_flseek:             EQU        84h
040045             0120**  ffs_ftruncate:          EQU        85h
040045             0121**  ffs_fsync:              EQU        86h
040045             0122**  ffs_fforward:           EQU        87h
040045             0123**  ffs_fexpand:            EQU        88h
040045             0124**  ffs_fgets:              EQU        89h
040045             0125**  ffs_fputc:              EQU        8Ah
040045             0126**  ffs_fputs:              EQU        8Bh
040045             0127**  ffs_fprintf:            EQU        8Ch
040045             0128**  ffs_ftell:              EQU        8Dh
040045             0129**  ffs_feof:               EQU        8Eh
040045             0130**  ffs_fsize:              EQU        8Fh
040045             0131**  ffs_ferror:             EQU        90h
040045             0132**  
040045             0133**  ; FatFS directory access functions
040045             0134**  ;
040045             0135**  ffs_dopen:              EQU        91h
040045             0136**  ffs_dclose:             EQU        92h
040045             0137**  ffs_dread:              EQU        93h
040045             0138**  ffs_dfindfirst:         EQU        94h
040045             0139**  ffs_dfindnext:          EQU        95h
040045             0140**  
040045             0141**  ; FatFS file and directory management functions
040045             0142**  ;
040045             0143**  ffs_stat:               EQU        96h
040045             0144**  ffs_unlink:             EQU        97h
040045             0145**  ffs_rename:             EQU        98h
040045             0146**  ffs_chmod:              EQU        99h
040045             0147**  ffs_utime:              EQU        9Ah
040045             0148**  ffs_mkdir:              EQU        9Bh
040045             0149**  ffs_chdir:              EQU        9Ch
040045             0150**  ffs_chdrive:            EQU        9Dh
040045             0151**  ffs_getcwd:             EQU        9Eh
040045             0152**  
040045             0153**  ; FatFS volume management and system configuration functions
040045             0154**  ;
040045             0155**  ffs_mount:              EQU        9Fh
040045             0156**  ffs_mkfs:               EQU        A0h
040045             0157**  ffs_fdisk:              EQU        A1h
040045             0158**  ffs_getfree:            EQU        A2h
040045             0159**  ffs_getlabel:           EQU        A3h
040045             0160**  ffs_setlabel:           EQU        A4h
040045             0161**  ffs_setcp:              EQU        A5h
040045             0162**  
040045             0163**  ; File access modes
040045             0164**  ;
040045             0165**  fa_read:                EQU        01h
040045             0166**  fa_write:               EQU        02h
040045             0167**  fa_open_existing:       EQU        00h
040045             0168**  fa_create_new:          EQU        04h
040045             0169**  fa_create_always:       EQU        08h
040045             0170**  fa_open_always:         EQU        10h
040045             0171**  fa_open_append:         EQU        30h
040045             0172**  
040045             0173**  ; System variable indexes for api_sysvars
040045             0174**  ; Index into _sysvars in globals.asm
040045             0175**  ;
040045             0176**  sysvar_time:            EQU        00h        ; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0177**  sysvar_vpd_pflags:      EQU        04h        ; 1: Flags to indicate completion of VDP commands
040045             0178**  sysvar_keyascii:        EQU        05h        ; 1: ASCII keycode, or 0 if no key is pressed
040045             0179**  sysvar_keymods:         EQU        06h        ; 1: Keycode modifiers
040045             0180**  sysvar_cursorX:         EQU        07h        ; 1: Cursor X position
040045             0181**  sysvar_cursorY:         EQU        08h        ; 1: Cursor Y position
040045             0182**  sysvar_scrchar:         EQU        09h        ; 1: Character read from screen
040045             0183**  sysvar_scrpixel:        EQU        0Ah        ; 3: Pixel data read from screen (R,B,G)
040045             0184**  sysvar_audioChannel:    EQU        0Dh        ; 1: Audio channel
040045             0185**  sysvar_audioSuccess:    EQU        0Eh        ; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0186**  sysvar_scrWidth:        EQU        0Fh        ; 2: Screen width in pixels
040045             0187**  sysvar_scrHeight:       EQU        11h        ; 2: Screen height in pixels
040045             0188**  sysvar_scrCols:         EQU        13h        ; 1: Screen columns in characters
040045             0189**  sysvar_scrRows:         EQU        14h        ; 1: Screen rows in characters
040045             0190**  sysvar_scrColours:      EQU        15h        ; 1: Number of colours displayed
040045             0191**  sysvar_scrpixelIndex:   EQU        16h        ; 1: Index of pixel data read from screen
040045             0192**  sysvar_vkeycode:        EQU        17h        ; 1: Virtual key code from FabGL
040045             0193**  sysvar_vkeydown:        EQU        18h        ; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0194**  sysvar_vkeycount:       EQU        19h        ; 1: Incremented every time a key packet is received
040045             0195**  sysvar_rtc:             EQU        1Ah        ; 6: Real time clock data
040045             0196**  sysvar_spare:           EQU        20h        ; 2: Spare, previously used by rtc
040045             0197**  sysvar_keydelay:        EQU        22h        ; 2: Keyboard repeat delay
040045             0198**  sysvar_keyrate:         EQU        24h        ; 2: Keyboard repeat reat
040045             0199**  sysvar_keyled:          EQU        26h        ; 1: Keyboard LED status
040045             0200**  sysvar_scrMode:         EQU        27h        ; 1: Screen mode
040045             0201**  sysvar_rtcEnable:       EQU        28h        ; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0202**  sysvar_mouseX:          EQU        29h        ; 2: Mouse X position
040045             0203**  sysvar_mouseY:          EQU        2Bh        ; 2: Mouse Y position
040045             0204**  sysvar_mouseButtons:    EQU        2Dh        ; 1: Mouse button state
040045             0205**  sysvar_mouseWheel:      EQU        2Eh        ; 1: Mouse wheel delta
040045             0206**  sysvar_mouseXDelta:     EQU        2Fh        ; 2: Mouse X delta
040045             0207**  sysvar_mouseYDelta:     EQU        31h        ; 2: Mouse Y delta
040045             0208**  
040045             0209**  ; Flags for the VPD protocol
040045             0210**  ;
040045             0211**  vdp_pflag_cursor:       EQU        00000001b
040045             0212**  vdp_pflag_scrchar:      EQU        00000010b
040045             0213**  vdp_pflag_point:        EQU        00000100b
040045             0214**  vdp_pflag_audio:        EQU        00001000b
040045             0215**  vdp_pflag_mode:         EQU        00010000b
040045             0216**  vdp_pflag_rtc:          EQU        00100000b
040045             0217**  vdp_pflag_mouse:        EQU        01000000b
040045             0218**  ; vdp_pflag_buffered:        EQU        10000000b
040045             0219**  
040045             0220**  ; commented out for compatiblitiy with ez80asm
040045             0221**  
040045             0222**  ;; FatFS structures
040045             0223**  ;; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0224**  ;;
040045             0225**  ;; Object ID and allocation information (FFOBJID)
040045             0226**  ;;
040045             0227**  ;FFOBJID	.STRUCT
040045             0228**  ;	fs:		DS	3	; Pointer to the hosting volume of this object
040045             0229**  ;	id:		DS	2	; Hosting volume mount ID
040045             0230**  ;	attr:		DS	1	; Object attribute
040045             0231**  ;	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0232**  ;	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040045             0233**  ;	objsize:	DS	4	; Object size (valid when sclust != 0)
040045             0234**  ;FFOBJID_SIZE .ENDSTRUCT FFOBJID
040045             0235**  ;;
040045             0236**  ;; File object structure (FIL)
040045             0237**  ;;
040045             0238**  ;FIL .STRUCT
040045             0239**  ;	obj:		.TAG	FFOBJID	; Object identifier
040045             0240**  ;	flag:		DS	1	; File status flags
040045             0241**  ;	err:		DS	1	; Abort flag (error code)
040045             0242**  ;	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040045             0243**  ;	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040045             0244**  ;	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040045             0245**  ;	dir_sect:	DS	4	; Sector number containing the directory entry
040045             0246**  ;	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040045             0247**  ;FIL_SIZE .ENDSTRUCT FIL
040045             0248**  ;;
040045             0249**  ;; Directory object structure (DIR)
040045             0250**  ;;
040045             0251**  ;DIR .STRUCT
040045             0252**  ;	obj:		.TAG	FFOBJID	; Object identifier
040045             0253**  ;	dptr:		DS	4	; Current read/write offset
040045             0254**  ;	clust:		DS	4	; Current cluster
040045             0255**  ;	sect:		DS	4	; Current sector (0:Read operation has terminated)
040045             0256**  ;	dir:		DS	3	; Pointer to the directory item in the win[]
040045             0257**  ;	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040045             0258**  ;	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0259**  ;DIR_SIZE .ENDSTRUCT DIR
040045             0260**  ;;
040045             0261**  ;; File information structure (FILINFO)
040045             0262**  ;;
040045             0263**  ;FILINFO .STRUCT
040045             0264**  ;	fsize:		DS 	4	; File size
040045             0265**  ;	fdate:		DS	2	; Modified date
040045             0266**  ;	ftime:		DS	2	; Modified time
040045             0267**  ;	fattrib:	DS	1	; File attribute
040045             0268**  ;	altname:	DS	13	; Alternative file name
040045             0269**  ;	fname:		DS	256	; Primary file name
040045             0270**  ;FILINFO_SIZE .ENDSTRUCT FILINFO
040045             0044*       include "vdu.inc"
040045             0001**  ; Agon VDU commands equates and convenience functions
040045             0002**  ; Copyright 2024 J.B. Langston
040045             0003**  ;
040045             0004**  ; Permission is hereby granted, free of charge, to any person obtaining a
040045             0005**  ; copy of this software and associated documentation files (the "Software"),
040045             0006**  ; to deal in the Software without restriction, including without limitation
040045             0007**  ; the rights to use, copy, modify, merge, publish, distribute, sublicense,
040045             0008**  ; and/or sell copies of the Software, and to permit persons to whom the
040045             0009**  ; Software is furnished to do so, subject to the following conditions:
040045             0010**  ;
040045             0011**  ; The above copyright notice and this permission notice shall be included in
040045             0012**  ; all copies or substantial portions of the Software.
040045             0013**  ;
040045             0014**  ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
040045             0015**  ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
040045             0016**  ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
040045             0017**  ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
040045             0018**  ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
040045             0019**  ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
040045             0020**  ; DEALINGS IN THE SOFTWARE.
040045             0021**  
040045             0022**  ; Convenience macros
040045             0023**      macro SendByte value
040045             0024**          ld a, value
040045             0025**          rst.lil $10
040045             0026**      endmacro
040045             0027**  
040045             0028**      macro SendBytes addr, length
040045             0029**          ld hl, addr
040045             0030**          ld bc, length
040045             0031**          rst.lil $18
040045             0032**      endmacro
040045             0033**  
040045             0034**      macro SendString addr, term
040045             0035**          ld hl, addr
040045             0036**          ld bc, 0
040045             0037**          ld a, term
040045             0038**          rst.lil $18
040045             0039**      endmacro
040045             0040**  
040045             0041**  ; VDU commands
040045             0042**  ; https://github.com/AgonConsole8/agon-docs/blob/main/docs/vdp/VDU-Commands.md
040045             0043**  VduNull: equ 0
040045             0044**  VduPrinterChar: equ 1
040045             0045**  VduPrinterOn: equ 2
040045             0046**  VduPrinterOff: equ 3
040045             0047**  VduTextCursor: equ 4
040045             0048**  VduGraphicsCursor: equ 5
040045             0049**  VduEnableScreen: equ 8
040045             0050**  VduBeep: equ 7
040045             0051**  VduCursorLeft: equ 8
040045             0052**  VduCursorRight: equ 9
040045             0053**  VduCursorDown: equ 10
040045             0054**  VduCursorUp: equ 11
040045             0055**  VduClearScreen: equ 12
040045             0056**  VduCarriageReturn: equ 13
040045             0057**  VduPageModeOn: equ 14
040045             0058**  VduPageModeOff: equ 15
040045             0059**  VduClearGraphics: equ 16
040045             0060**  VduTextColor: equ 17
040045             0061**  VduBackgroundColor: equ 128
040045             0062**  VduGraphicsColor: equ 18
040045             0063**  VduSetPalette: equ 19
040045             0064**  VduSetPaletteRGB: equ $ff
040045             0065**  VduResetPalette: equ 20
040045             0066**  VduDisableScreen: equ 21
040045             0067**  VduSetMode: equ 22
040045             0068**  VduCustomChar: equ 23
040045             0069**  VduCommand: equ 23
040045             0070**  VduGraphicsViewport: equ 24
040045             0071**  VduPlot: equ 25
040045             0072**  VduResetViewports: equ 26
040045             0073**  VduEscapeChar: equ 27
040045             0074**  VduTextViewport: equ 28
040045             0075**  VduGraphicsOrigin: equ 29
040045             0076**  VduCursorHome: equ 30
040045             0077**  VduCursorMove: equ 31
040045             0078**  VduBackspace: equ 127
040045             0079**  
040045             0080**  ; Cursor display Commands
040045             0081**  ; https://github.com/AgonConsole8/agon-docs/blob/main/docs/vdp/VDU-Commands.md#vdu-23-1-n-cursor-control
040045             0082**  VduCursorDisplay: equ 1
040045             0083**  VduCursorHide: equ 0
040045             0084**  VduCursorShow: equ 1
040045             0085**  VduCursorSteady: equ 2
040045             0086**  VduCursorFlash: equ 3
040045             0087**  
040045             0088**  ; Cursor movement commands
040045             0089**  ; https://github.com/AgonConsole8/agon-docs/blob/main/docs/vdp/VDU-Commands.md#vdu-23-16-setting-mask-define-cursor-movement-behaviour
040045             0090**  VduCursorMovement: equ 16
040045             0091**  VduScrollProtection: equ %00000001
040045             0092**  
040045             0093**  ; System commands
040045             0094**  ; https://github.com/AgonConsole8/agon-docs/blob/main/docs/vdp/System-Commands.md
040045             0095**  VduSystem: equ 0
040045             0096**  VduResetChars: equ $91
040045             0097**  VduMapCharToBitmap: equ $92
040045             0098**  VduVsyncBufferSwap: equ $C3
040045             0099**  
040045             0100**  ; Context management commands
040045             0101**  ; https://github.com/AgonConsole8/agon-docs/blob/main/docs/vdp/Context-Management-API.md
040045             0102**  VduContextManagement: equ $C8
040045             0103**  VduContextSelectStack: equ 0
040045             0104**  VduContextDeleteStack: equ 1
040045             0105**  VduContextReset: equ 2
040045             0106**  
040045             0107**  ;VduContextResetGraphicsPainting: equ 0
040045             0108**  ;VduContextResetGraphicsPositioning: equ 1
040045             0109**  ;VduContextResetTextPainting: equ 2
040045             0110**  ;VduContextResetTextCursorVisuals: equ 3
040045             0111**  ;VduContextResetTextCursorBehavior: equ 4
040045             0112**  ;VduContextResetFonts: equ 5
040045             0113**  VduContextResetBitmapChars: equ 6
040045             0114**  
040045             0115**  ; Buffer commands
040045             0116**  ; https://github.com/AgonConsole8/agon-docs/blob/main/docs/vdp/Buffered-Commands-API.md
040045             0117**  VduBuffer: equ $A0
040045             0118**  VduBufferWriteBlock: equ 0
040045             0119**  VduBufferCall: equ 1
040045             0120**  VduBufferClear: equ 2
040045             0121**  
040045             0122**  ; https://github.com/AgonConsole8/agon-docs/blob/main/docs/vdp/Bitmaps-API.md
040045             0123**  VduBitmap: equ 27
040045             0124**  VduBitmapSelect: equ 0
040045             0125**  VduBitmapLoad: equ 1
040045             0126**  VduBitmapSolidColor: equ 2
040045             0127**  VduBitmapDraw: equ 3
040045             0128**  VduBitmapSelectBuffer: equ $20
040045             0129**  VduBitmapCreateBuffer: equ $21
040045             0130**  VduBitmapFormatRGBA8888: equ 0
040045             0131**  VduBitmapFormatRGBA2222: equ 1
040045             0132**  VduBitmapFormatMono: equ 2
040045             0133**  VduBitmapFormatNative: equ 3
040045             0134**  
040045             0135**  ; Standard control characters
040045             0136**  CR:	    equ     0dh
040045             0137**  LF:	    equ     0ah
040045             0138**  EOS:    equ     0       ; end of string (null terminated)
040045             0139**  
040045             0140**  ; Output a character
040045             0141**  ; Params:
040045             0142**  ;   A = character to output
040045             0143**  CharOut:
040045 5B D7       0144**      rst.lil $10
040047 C9          0145**      ret
040048             0146**  
040048             0147**  ; output a string terminated by EOS
040048             0148**  ; Params:
040048             0149**  ;   HL = address of string
040048             0150**  StringOut:
040048 F5          0151**      push af
040049 C5          0152**      push bc
04004A 01 00 00 00 0153**      ld bc, 0
04004E 3E 00       0154**      ld a, EOS
040050 CD 57 00 04 0155**      call BytesOut
040054 C1          0156**      pop bc
040055 F1          0157**      pop af
040056 C9          0158**      ret
040057             0159**  
040057             0160**  ; Output a specified number of bytes
040057             0161**  ; Params:
040057             0162**  ;   HL = address of bytes
040057             0163**  ;   BC = byte count
040057             0164**  BytesOut:
040057 5B DF       0165**      rst.lil $18
040059 C9          0166**      ret
04005A             0167**  
04005A             0168**  ; Output a space
04005A             0169**  Space:
04005A F5          0170**      push af
04005B             0171**      SendByte ' '
04005B 3E 20       0001**M         ld a, value
04005D 5B D7       0002**M         rst.lil $10
04005F F1          0172**      pop af
040060 C9          0173**      ret
040061             0174**  
040061             0175**  ; Output a new line
040061             0176**  NewLine:
040061 F5          0177**      push af
040062             0178**      SendByte CR
040062 3E 0D       0001**M         ld a, value
040064 5B D7       0002**M         rst.lil $10
040066             0179**      SendByte LF
040066 3E 0A       0001**M         ld a, value
040068 5B D7       0002**M         rst.lil $10
04006A F1          0180**      pop af
04006B C9          0181**      ret
04006C             0182**  
04006C             0183**  ; Set the VDP mode
04006C             0184**  ; Params:
04006C             0185**  ;   C = mode number
04006C             0186**  VdpMode:
04006C F5          0187**      push af
04006D             0188**      SendByte VduSetMode
04006D 3E 16       0001**M         ld a, value
04006F 5B D7       0002**M         rst.lil $10
040071             0189**      SendByte c
040071 79          0001**M         ld a, value
040072 5B D7       0002**M         rst.lil $10
040074 F1          0190**      pop af
040075 C9          0191**      ret
040076             0192**  
040076             0193**  ; Clear the screen
040076             0194**  ClearScreen:
040076 F5          0195**      push af
040077             0196**      SendByte VduClearScreen
040077 3E 0C       0001**M         ld a, value
040079 5B D7       0002**M         rst.lil $10
04007B F1          0197**      pop af
04007C C9          0198**      ret
04007D             0199**  
04007D             0200**  ; Move to X, Y coordinates
04007D             0201**  ; Params:
04007D             0202**  ;   C = x coordinate
04007D             0203**  ;   B = Y coordinate
04007D             0204**  MoveTo:
04007D F5          0205**      push af
04007E             0206**      SendByte VduCursorMove
04007E 3E 1F       0001**M         ld a, value
040080 5B D7       0002**M         rst.lil $10
040082             0207**      SendByte c
040082 79          0001**M         ld a, value
040083 5B D7       0002**M         rst.lil $10
040085             0208**      SendByte b
040085 78          0001**M         ld a, value
040086 5B D7       0002**M         rst.lil $10
040088 F1          0209**      pop af
040089 C9          0210**      ret
04008A             0211**  
04008A             0212**  ; Set default text color
04008A             0213**  DefaultTextColor:
04008A C5          0214**      push bc
04008B 06 00       0215**      ld b, 0                     ; white on black in default palette
04008D 0E 0F       0216**      ld c, 15
04008F CD 95 00 04 0217**      call TextColor
040093 C1          0218**      pop bc
040094 C9          0219**      ret
040095             0220**  
040095             0221**  ; Set text color
040095             0222**  ; Params:
040095             0223**  ;   C = foreground color
040095             0224**  ;   B = background color
040095             0225**  TextColor:
040095 F5          0226**      push af
040096             0227**      SendByte VduTextColor       ; pen (foreground)
040096 3E 11       0001**M         ld a, value
040098 5B D7       0002**M         rst.lil $10
04009A             0228**      SendByte c
04009A 79          0001**M         ld a, value
04009B 5B D7       0002**M         rst.lil $10
04009D             0229**      SendByte VduTextColor       ; paper (background)
04009D 3E 11       0001**M         ld a, value
04009F 5B D7       0002**M         rst.lil $10
0400A1 78          0230**      ld a, b
0400A2 C6 80       0231**      add VduBackgroundColor
0400A4 5B D7       0232**      rst.lil $10
0400A6 F1          0233**      pop af
0400A7 C9          0234**      ret
0400A8             0235**  
0400A8             0236**  ; Hide the text cursor
0400A8             0237**  TextCursorHide:
0400A8 F5          0238**      push af
0400A9             0239**      SendByte VduCommand
0400A9 3E 17       0001**M         ld a, value
0400AB 5B D7       0002**M         rst.lil $10
0400AD             0240**      SendByte VduCursorDisplay
0400AD 3E 01       0001**M         ld a, value
0400AF 5B D7       0002**M         rst.lil $10
0400B1             0241**      SendByte VduCursorHide
0400B1 3E 00       0001**M         ld a, value
0400B3 5B D7       0002**M         rst.lil $10
0400B5 F1          0242**      pop af
0400B6 C9          0243**      ret
0400B7             0244**  
0400B7             0245**  ; Show the text cursor
0400B7             0246**  TextCursorShow:
0400B7 F5          0247**      push af
0400B8             0248**      SendByte VduCommand
0400B8 3E 17       0001**M         ld a, value
0400BA 5B D7       0002**M         rst.lil $10
0400BC             0249**      SendByte VduCursorDisplay
0400BC 3E 01       0001**M         ld a, value
0400BE 5B D7       0002**M         rst.lil $10
0400C0             0250**      SendByte VduCursorShow
0400C0 3E 01       0001**M         ld a, value
0400C2 5B D7       0002**M         rst.lil $10
0400C4 F1          0251**      pop af
0400C5 C9          0252**      ret
0400C6             0253**  
0400C6             0254**  ; Set the specified cursor movement bits
0400C6             0255**  ; Params:
0400C6             0256**  ;   C = bits to set
0400C6             0257**  SetCursorMovementBit:
0400C6 F5          0258**      push af
0400C7             0259**      SendByte VduCommand
0400C7 3E 17       0001**M         ld a, value
0400C9 5B D7       0002**M         rst.lil $10
0400CB             0260**      SendByte VduCursorMovement
0400CB 3E 10       0001**M         ld a, value
0400CD 5B D7       0002**M         rst.lil $10
0400CF 79          0261**      ld a, c
0400D0 2F          0262**      cpl
0400D1             0263**      SendByte a
0400D1 7F          0001**M         ld a, value
0400D2 5B D7       0002**M         rst.lil $10
0400D4 2F          0264**      cpl
0400D5             0265**      SendByte a
0400D5 7F          0001**M         ld a, value
0400D6 5B D7       0002**M         rst.lil $10
0400D8 F1          0266**      pop af
0400D9 C9          0267**      ret
0400DA             0268**  
0400DA             0269**  ; Clear the specified cursor movement bits
0400DA             0270**  ; Params:
0400DA             0271**  ;   C = bits to clear
0400DA             0272**  ClearCursorMovementBit:
0400DA F5          0273**      push af
0400DB             0274**      SendByte VduCommand
0400DB 3E 17       0001**M         ld a, value
0400DD 5B D7       0002**M         rst.lil $10
0400DF             0275**      SendByte VduCursorMovement
0400DF 3E 10       0001**M         ld a, value
0400E1 5B D7       0002**M         rst.lil $10
0400E3 79          0276**      ld a, c
0400E4 2F          0277**      cpl
0400E5             0278**      SendByte a
0400E5 7F          0001**M         ld a, value
0400E6 5B D7       0002**M         rst.lil $10
0400E8 AF          0279**      xor a
0400E9             0280**      SendByte a
0400E9 7F          0001**M         ld a, value
0400EA 5B D7       0002**M         rst.lil $10
0400EC F1          0281**      pop af
0400ED C9          0282**      ret
0400EE             0283**  
0400EE             0284**  ; Prevent the screen from scrolling when the last character is written
0400EE             0285**  EnableScrollProtection:
0400EE C5          0286**      push bc
0400EF 0E 01       0287**      ld c, VduScrollProtection
0400F1 CD C6 00 04 0288**      call SetCursorMovementBit
0400F5 C1          0289**      pop bc
0400F6 C9          0290**      ret
0400F7             0291**  
0400F7             0292**  ; Allow the screen to scroll when the last character is written
0400F7             0293**  DisableScrollProtection:
0400F7 C5          0294**      push bc
0400F8 0E 01       0295**      ld c, VduScrollProtection
0400FA CD DA 00 04 0296**      call ClearCursorMovementBit
0400FE C1          0297**      pop bc
0400FF C9          0298**      ret
040100             0299**  
040100             0300**  ; Wait for vsync (and swap buffers if using a buffered video mode)
040100             0301**  WaitVSync:
040100 F5          0302**      push af
040101             0303**      SendByte VduCommand
040101 3E 17       0001**M         ld a, value
040103 5B D7       0002**M         rst.lil $10
040105             0304**      SendByte VduSystem
040105 3E 00       0001**M         ld a, value
040107 5B D7       0002**M         rst.lil $10
040109             0305**      SendByte VduVsyncBufferSwap
040109 3E C3       0001**M         ld a, value
04010B 5B D7       0002**M         rst.lil $10
04010D F1          0306**      pop af
04010E C9          0307**      ret
04010F             0308**  
04010F             0309**  ; Round the accumulator to the top 2 most significant bits
04010F             0310**  Round2MSB:
04010F CB 6F       0311**      bit 5, a
040111 C2 18 01 04 0312**      jp nz, Round2MSBUp
040115 E6 C0       0313**      and %11000000
040117 C9          0314**      ret
040118             0315**  Round2MSBUp:
040118 E6 C0       0316**      and %11000000
04011A C6 40       0317**      add %01000000
04011C D0          0318**      ret nc
04011D D6 40       0319**      sub %01000000
04011F C9          0320**      ret
040120             0321**  
040120             0322**  ; return the RGBA2222 equivalent of RGBA bytes
040120             0323**  ; Params:
040120             0324**  ;   HL = pointer to RGB888 format input buffer
040120             0325**  ;   DE = pointer to RGBA2222 format output buffer
040120             0326**  ;   B = number of colors to convert
040120             0327**  ; Return:
040120             0328**  ;   A = RGBA2222 value
040120             0329**  MakeRGBA2222:
040120 D5          0330**      push de
040121 7E          0331**      ld a, (hl)
040122 23          0332**      inc hl
040123 CD 0F 01 04 0333**      call Round2MSB
040127 0F          0334**      rrca
040128 0F          0335**      rrca
040129 0F          0336**      rrca
04012A 0F          0337**      rrca
04012B 0F          0338**      rrca
04012C 0F          0339**      rrca
04012D 57          0340**      ld d, a
04012E 7E          0341**      ld a, (hl)
04012F 23          0342**      inc hl
040130 CD 0F 01 04 0343**      call Round2MSB
040134 B7          0344**      or a
040135 0F          0345**      rrca
040136 0F          0346**      rrca
040137 0F          0347**      rrca
040138 0F          0348**      rrca
040139 5F          0349**      ld e, a
04013A 7E          0350**      ld a, (hl)
04013B 23          0351**      inc hl
04013C CD 0F 01 04 0352**      call Round2MSB
040140 B7          0353**      or a
040141 0F          0354**      rrca
040142 0F          0355**      rrca
040143 B2          0356**      or d
040144 B3          0357**      or e
040145 F6 C0       0358**      or $c0                  ; alpha
040147 D1          0359**      pop de
040148 12          0360**      ld (de), a
040149 13          0361**      inc de
04014A 10 D4       0362**      djnz MakeRGBA2222
04014C C9          0363**      ret
04014D             0364**  
04014D             0365**  ; Clear a buffer
04014D             0366**  ; Params:
04014D             0367**  ;   DE = buffer id
04014D             0368**  ClearBuffer:
04014D F5          0369**      push af
04014E             0370**      SendByte VduCommand
04014E 3E 17       0001**M         ld a, value
040150 5B D7       0002**M         rst.lil $10
040152             0371**      SendByte VduSystem
040152 3E 00       0001**M         ld a, value
040154 5B D7       0002**M         rst.lil $10
040156             0372**      SendByte VduBuffer
040156 3E A0       0001**M         ld a, value
040158 5B D7       0002**M         rst.lil $10
04015A             0373**      SendByte e                  ; buffer id
04015A 7B          0001**M         ld a, value
04015B 5B D7       0002**M         rst.lil $10
04015D             0374**      SendByte d
04015D 7A          0001**M         ld a, value
04015E 5B D7       0002**M         rst.lil $10
040160             0375**      SendByte VduBufferClear
040160 3E 02       0001**M         ld a, value
040162 5B D7       0002**M         rst.lil $10
040164 F1          0376**      pop af
040165 C9          0377**      ret
040166             0378**  
040166             0379**  ; Call a buffer
040166             0380**  ; Params:
040166             0381**  ;   DE = buffer id
040166             0382**  CallBuffer:
040166 F5          0383**      push af
040167             0384**      SendByte VduCommand
040167 3E 17       0001**M         ld a, value
040169 5B D7       0002**M         rst.lil $10
04016B             0385**      SendByte VduSystem
04016B 3E 00       0001**M         ld a, value
04016D 5B D7       0002**M         rst.lil $10
04016F             0386**      SendByte VduBuffer
04016F 3E A0       0001**M         ld a, value
040171 5B D7       0002**M         rst.lil $10
040173             0387**      SendByte e                  ; buffer id
040173 7B          0001**M         ld a, value
040174 5B D7       0002**M         rst.lil $10
040176             0388**      SendByte d
040176 7A          0001**M         ld a, value
040177 5B D7       0002**M         rst.lil $10
040179             0389**      SendByte VduBufferCall
040179 3E 01       0001**M         ld a, value
04017B 5B D7       0002**M         rst.lil $10
04017D F1          0390**      pop af
04017E C9          0391**      ret
04017F             0392**  
04017F             0393**  ; Send a block of data to a buffer
04017F             0394**  ; Params:
04017F             0395**  ;   DE = buffer id
04017F             0396**  ;   BC = buffer length
04017F             0397**  ;   HL = buffer data
04017F             0398**  SendBufferBlock:
04017F F5          0399**      push af
040180 E5          0400**      push hl
040181 C5          0401**      push bc
040182             0402**      SendByte VduCommand
040182 3E 17       0001**M         ld a, value
040184 5B D7       0002**M         rst.lil $10
040186             0403**      SendByte VduSystem
040186 3E 00       0001**M         ld a, value
040188 5B D7       0002**M         rst.lil $10
04018A             0404**      SendByte VduBuffer
04018A 3E A0       0001**M         ld a, value
04018C 5B D7       0002**M         rst.lil $10
04018E             0405**      SendByte e                  ; buffer id
04018E 7B          0001**M         ld a, value
04018F 5B D7       0002**M         rst.lil $10
040191             0406**      SendByte d
040191 7A          0001**M         ld a, value
040192 5B D7       0002**M         rst.lil $10
040194             0407**      SendByte VduBufferWriteBlock
040194 3E 00       0001**M         ld a, value
040196 5B D7       0002**M         rst.lil $10
040198             0408**      SendByte c                  ; length
040198 79          0001**M         ld a, value
040199 5B D7       0002**M         rst.lil $10
04019B             0409**      SendByte b
04019B 78          0001**M         ld a, value
04019C 5B D7       0002**M         rst.lil $10
04019E             0410**  SendBufferLoop:
04019E             0411**      SendByte (hl)
04019E 7E          0001**M         ld a, value
04019F 5B D7       0002**M         rst.lil $10
0401A1 23          0412**      inc hl
0401A2 0B          0413**      dec bc
0401A3 78          0414**      ld a, b
0401A4 B1          0415**      or c
0401A5 C2 9E 01 04 0416**      jp nz, SendBufferLoop
0401A9 C1          0417**      pop bc
0401AA E1          0418**      pop hl
0401AB F1          0419**      pop af
0401AC C9          0420**      ret
0401AD             0421**  
0401AD             0422**  ; Select a bitmap using buffer ID
0401AD             0423**  ; Params:
0401AD             0424**  ;   DE = buffer id
0401AD             0425**  SelectBitmapBuffer:
0401AD F5          0426**      push af
0401AE             0427**      SendByte VduCommand
0401AE 3E 17       0001**M         ld a, value
0401B0 5B D7       0002**M         rst.lil $10
0401B2             0428**      SendByte VduBitmap
0401B2 3E 1B       0001**M         ld a, value
0401B4 5B D7       0002**M         rst.lil $10
0401B6             0429**      SendByte VduBitmapSelectBuffer
0401B6 3E 20       0001**M         ld a, value
0401B8 5B D7       0002**M         rst.lil $10
0401BA             0430**      SendByte e                  ; buffer id
0401BA 7B          0001**M         ld a, value
0401BB 5B D7       0002**M         rst.lil $10
0401BD             0431**      SendByte d
0401BD 7A          0001**M         ld a, value
0401BE 5B D7       0002**M         rst.lil $10
0401C0 F1          0432**      pop af
0401C1 C9          0433**      ret
0401C2             0434**  
0401C2             0435**  ; Create selected bitmap from buffer
0401C2             0436**  ; Params:
0401C2             0437**  ;   BC = width
0401C2             0438**  ;   DE = height
0401C2             0439**  ;   L = format
0401C2             0440**  CreateBitmapFromBuffer:
0401C2 F5          0441**      push af
0401C3             0442**      SendByte VduCommand
0401C3 3E 17       0001**M         ld a, value
0401C5 5B D7       0002**M         rst.lil $10
0401C7             0443**      SendByte VduBitmap
0401C7 3E 1B       0001**M         ld a, value
0401C9 5B D7       0002**M         rst.lil $10
0401CB             0444**      SendByte VduBitmapCreateBuffer
0401CB 3E 21       0001**M         ld a, value
0401CD 5B D7       0002**M         rst.lil $10
0401CF             0445**      SendByte c                  ; width
0401CF 79          0001**M         ld a, value
0401D0 5B D7       0002**M         rst.lil $10
0401D2             0446**      SendByte b
0401D2 78          0001**M         ld a, value
0401D3 5B D7       0002**M         rst.lil $10
0401D5             0447**      SendByte e                  ; height
0401D5 7B          0001**M         ld a, value
0401D6 5B D7       0002**M         rst.lil $10
0401D8             0448**      SendByte d
0401D8 7A          0001**M         ld a, value
0401D9 5B D7       0002**M         rst.lil $10
0401DB             0449**      SendByte l                  ; format
0401DB 7D          0001**M         ld a, value
0401DC 5B D7       0002**M         rst.lil $10
0401DE F1          0450**      pop af
0401DF C9          0451**      ret
0401E0             0452**  
0401E0             0453**  ; map character number to bitmap using buffer id
0401E0             0454**  ; C = char
0401E0             0455**  ; DE = bitmap id
0401E0             0456**  MapCharToBitmap:
0401E0 F5          0457**      push af
0401E1             0458**      SendByte VduCommand
0401E1 3E 17       0001**M         ld a, value
0401E3 5B D7       0002**M         rst.lil $10
0401E5             0459**      SendByte VduSystem
0401E5 3E 00       0001**M         ld a, value
0401E7 5B D7       0002**M         rst.lil $10
0401E9             0460**      SendByte VduMapCharToBitmap
0401E9 3E 92       0001**M         ld a, value
0401EB 5B D7       0002**M         rst.lil $10
0401ED             0461**      SendByte c                  ; character number
0401ED 79          0001**M         ld a, value
0401EE 5B D7       0002**M         rst.lil $10
0401F0             0462**      SendByte e                  ; bitmap id
0401F0 7B          0001**M         ld a, value
0401F1 5B D7       0002**M         rst.lil $10
0401F3             0463**      SendByte d
0401F3 7A          0001**M         ld a, value
0401F4 5B D7       0002**M         rst.lil $10
0401F6 F1          0464**      pop af
0401F7 C9          0465**      ret
0401F8             0466**  
0401F8             0467**  ; Reset character to bitmap mappings
0401F8             0468**  ResetBitmapChars:
0401F8 C5          0469**      push bc
0401F9 D5          0470**      push de
0401FA 0E 00       0471**      ld c, 0
0401FC 11 FF FF 00 0472**      ld de, $ffff
040200             0473**  ResetBitmapCharLoop:
040200 CD E0 01 04 0474**      call MapCharToBitmap
040204 0C          0475**      inc c
040205 C2 00 02 04 0476**      jp nz, ResetBitmapCharLoop
040209 D1          0477**      pop de
04020A C1          0478**      pop bc
04020B C9          0479**      ret
04020C             0480**      ; VDP 2.8.0 and later
04020C             0481**      ;push af
04020C             0482**      ;SendByte VduCommand
04020C             0483**      ;SendByte VduSystem
04020C             0484**      ;SendByte VduContextManagement
04020C             0485**      ;SendByte VduContextReset
04020C             0486**      ;SendByte VduContextResetBitmapChars
04020C             0487**      ;SendByte $ff
04020C             0488**      ;pop af
04020C             0489**  
04020C             0490**  ; count the number of control chars in a buffer
04020C             0491**  ; Params:
04020C             0492**  ;   HL = buffer address
04020C             0493**  ;   BC = buffer length
04020C             0494**  ; Returns:
04020C             0495**  ;   DE = number of escape chars
04020C             0496**  CountControl:
04020C 11 00 00 00 0497**      ld de, 0
040210             0498**  CountControlLoop:
040210 7E          0499**      ld a, (hl)
040211 FE 20       0500**      cp ' '                      ; check if it's a control char
040213 D2 1E 02 04 0501**      jp nc, CountControlSkip
040217 FE 7F       0502**      cp 127
040219 C2 1E 02 04 0503**      jp nz, CountControlSkip
04021D 13          0504**      inc de                      ; if so, increment counter
04021E             0505**  CountControlSkip:               ; if not, move to next char
04021E 23          0506**      inc hl
04021F 0B          0507**      dec bc
040220 79          0508**      ld a, c
040221 B0          0509**      or b
040222 C2 10 02 04 0510**      jp nz, CountControlLoop
040226 C9          0511**      ret
040227             0512**  
040227             0513**  
040227             0514**  ; send a character, escaped if necessary
040227             0515**  ; A = char to send
040227             0516**  SendChar:
040227 FE 20       0517**      cp ' '                      ; check if it's a control char
040229 D2 39 02 04 0518**      jp nc, SendCharNoEscape
04022D FE 7F       0519**      cp 127
04022F C2 39 02 04 0520**      jp nz, SendCharNoEscape
040233 F5          0521**      push af                     ; if so, send escape char first
040234             0522**      SendByte VduEscapeChar
040234 3E 1B       0001**M         ld a, value
040236 5B D7       0002**M         rst.lil $10
040238 F1          0523**      pop af
040239             0524**  SendCharNoEscape:               ; if not, just send char
040239             0525**      SendByte a
040239 7F          0001**M         ld a, value
04023A 5B D7       0002**M         rst.lil $10
04023C C9          0526**      ret
04023D             0527**  
04023D             0528**  ; Load a data table into the VDU
04023D             0529**  ; IX = table address
04023D             0530**  ; HL = entry prefix function (0 for none)
04023D             0531**  ; D = entry stride
04023D             0532**  ; E = entry count
04023D             0533**  ; BC = free for use in prefix function
04023D             0534**  LoadTable:
04023D CD 56 02 04 0535**      call TablePrefix
040241 D5          0536**      push de
040242             0537**  LoadTableLoop:
040242 DD 7E 00    0538**      ld a, (ix+0)
040245             0539**      SendByte a
040245 7F          0001**M         ld a, value
040246 5B D7       0002**M         rst.lil $10
040248 DD 23       0540**      inc ix
04024A 15          0541**      dec d
04024B C2 42 02 04 0542**      jp nz, LoadTableLoop
04024F D1          0543**      pop de
040250 1D          0544**      dec e
040251 C2 3D 02 04 0545**      jp nz, LoadTable
040255 C9          0546**      ret
040256             0547**  
040256             0548**  ; call table prefix function in HL, unless it is 0
040256             0549**  ; HL = function pointer
040256             0550**  TablePrefix:
040256 7C          0551**      ld a, h
040257 B5          0552**      or l
040258 C8          0553**      ret z
040259 E9          0554**      jp (hl)
04025A             0045*   
04025A             0046*   Entry:
04025A F5          0047*       push af                                 ; store all the registers
04025B C5          0048*       push bc
04025C D5          0049*       push de
04025D DD E5       0050*       push ix
04025F FD E5       0051*       push iy
040261             0052*   
040261 C3 62 08 04 0053*       jp Main
040265             0054*   
040265             0055*   
040265             0056*   Exit:
040265 CD F8 01 04 0057*       call ResetBitmapChars
040269 FD E1       0058*       pop iy                                  ; pop all registers back from the stack
04026B DD E1       0059*       pop ix
04026D D1          0060*       pop de
04026E C1          0061*       pop bc
04026F F1          0062*       pop af
040270 21 00 00 00 0063*       ld hl,0                                 ; load the MOS API return code (0) for no errors.
040274 C9          0064*       ret                                     ; return to MOS
040275             0065*   
040275             0066*   
040275             0067*   ; platform specific graphics initialization
040275             0068*   InitGraphics:
040275 0E 08       0069*       ld c, 8
040277 CD 6C 00 04 0070*       call VdpMode
04027B CD EB 07 04 0071*       call LoadAllGradients
04027F CD A8 00 04 0072*       call TextCursorHide
040283 11 00 00 00 0073*       ld de, 0
040287 CD 68 07 04 0074*       call SetGradient
04028B             0075*       ;call EnableScrollProtection
04028B C9          0076*       ret
04028C             0077*   
04028C             0078*   
04028C             0079*   ; get a key press in A
04028C             0080*   GetKey:
04028C             0081*       MosCall mos_sysvars         ; get ix pointer to sysvars
04028C 3E 08       0001*M          ld a, function
04028E 49 CF       0002*M          rst.lis $08
040290 DD 7E 18    0082*       ld a, (ix+sysvar_vkeydown)  ; get key state
040293 B7          0083*       or a                        ; key is down; wait for it to be released
040294 C2 8C 02 04 0084*       jp nz, GetKey
040298 DD 7E 05    0085*       ld a, (ix+sysvar_keyascii)  ; load the ascii code of the key pressed
04029B DD 36 05 00 0086*       ld (ix+sysvar_keyascii), 0  ; clear it for next time
04029F B7          0087*       or a                        ; set z flag if key was pressed
0402A0 C9          0088*       ret
0402A1             0089*   
0402A1             0090*   
0402A1             0091*   ; Wait for a keypress and return in A
0402A1             0092*   WaitKey:
0402A1 CD 8C 02 04 0093*       call GetKey
0402A5             0094*   WaitKeyLoop:
0402A5 CD 8C 02 04 0095*       call GetKey
0402A9 CA A5 02 04 0096*       jp z, WaitKeyLoop
0402AD C9          0097*       ret
0402AE             0098*   
0402AE             0099*   
0402AE             0100*   ; Send all the tiles in the screen buffer
0402AE             0101*   SendScreenBuffer:
0402AE 21 B0 16 04 0102*       ld hl, ScreenBuffer     ; calculate total length of buffer
0402B2 01 AF 04 00 0103*       ld bc, ScreenSize-1
0402B6 CD 0C 02 04 0104*       call CountControl
0402BA 21 AF 04 00 0105*       ld hl, ScreenSize-1
0402BE 19          0106*       add hl, de              ; add necessary escape chars to length
0402BF E5          0107*       push hl
0402C0 C1          0108*       pop bc                  ; total buffer length is in bc
0402C1 03          0109*       inc bc                  ;
0402C2 21 B0 16 04 0110*       ld hl, ScreenBuffer     ; start of screen bufer in hl
0402C6 ED 5B 19 07 0111*       ld de, (BitmapCounter)  ; next buffer id after bitmaps in de
       04          
0402CB CD 4D 01 04 0112*       call ClearBuffer
0402CF             0113*       SendByte VduCommand
0402CF 3E 17       0001*M          ld a, value
0402D1 5B D7       0002*M          rst.lil $10
0402D3             0114*       SendByte VduSystem
0402D3 3E 00       0001*M          ld a, value
0402D5 5B D7       0002*M          rst.lil $10
0402D7             0115*       SendByte VduBuffer
0402D7 3E A0       0001*M          ld a, value
0402D9 5B D7       0002*M          rst.lil $10
0402DB             0116*       SendByte e                  ; buffer id
0402DB 7B          0001*M          ld a, value
0402DC 5B D7       0002*M          rst.lil $10
0402DE             0117*       SendByte d
0402DE 7A          0001*M          ld a, value
0402DF 5B D7       0002*M          rst.lil $10
0402E1             0118*       SendByte VduBufferWriteBlock
0402E1 3E 00       0001*M          ld a, value
0402E3 5B D7       0002*M          rst.lil $10
0402E5             0119*       SendByte c                  ; length
0402E5 79          0001*M          ld a, value
0402E6 5B D7       0002*M          rst.lil $10
0402E8             0120*       SendByte b
0402E8 78          0001*M          ld a, value
0402E9 5B D7       0002*M          rst.lil $10
0402EB             0121*       SendByte VduCursorHome
0402EB 3E 1E       0001*M          ld a, value
0402ED 5B D7       0002*M          rst.lil $10
0402EF             0122*   SendScreenBufferLoop:
0402EF 7E          0123*       ld a, (hl)
0402F0 CD 27 02 04 0124*       call SendChar
0402F4 23          0125*       inc hl
0402F5 0B          0126*       dec bc
0402F6 78          0127*       ld a, b
0402F7 B1          0128*       or c
0402F8 C2 EF 02 04 0129*       jp nz, SendScreenBufferLoop
0402FC C9          0130*       ret
0402FD             0131*   
0402FD             0132*   DrawScreen:
0402FD CD AE 02 04 0133*       call SendScreenBuffer
040301 CD 00 01 04 0134*       call WaitVSync
040305 CD 66 01 04 0135*       call CallBuffer
040309 C9          0136*       ret
04030A             0137*   
04030A             0138*   EnableInterrupt:
04030A C9          0139*       ret                     ; no interrupt needed on Agon
04030B             0140*   
04030B             0141*   
04030B             0142*   ShowHelp:
04030B C9          0143*       ret                     ; figure out how to do this later
04030C             0044            ;include "rcmsx.inc"
04030C             0045    
04030C             0046    ; =============================================================================
04030C             0047    ; general includes
04030C             0048    
04030C             0049            include "utility.inc"
04030C             0001*   ; Miscellaneuous utility functions
04030C             0002*   ; Copyright 2018-2024 J.B. Langston
04030C             0003*   ;
04030C             0004*   ; Permission is hereby granted, free of charge, to any person obtaining a
04030C             0005*   ; copy of this software and associated documentation files (the "Software"),
04030C             0006*   ; to deal in the Software without restriction, including without limitation
04030C             0007*   ; the rights to use, copy, modify, merge, publish, distribute, sublicense,
04030C             0008*   ; and/or sell copies of the Software, and to permit persons to whom the
04030C             0009*   ; Software is furnished to do so, subject to the following conditions:
04030C             0010*   ;
04030C             0011*   ; The above copyright notice and this permission notice shall be included in
04030C             0012*   ; all copies or substantial portions of the Software.
04030C             0013*   ;
04030C             0014*   ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
04030C             0015*   ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
04030C             0016*   ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
04030C             0017*   ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
04030C             0018*   ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
04030C             0019*   ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
04030C             0020*   ; DEALINGS IN THE SOFTWARE.
04030C             0021*   
04030C             0022*   
04030C             0023*           ; jumps to target label if the specified value is in A
04030C             0024*           ; can be used to build a concise dispatch routine...
04030C             0025*           ;
04030C             0026*           ; Dispatch:
04030C             0027*           ;       JumpIf 0, Target0
04030C             0028*           ;       JumpIf 1, Target1
04030C             0029*           ;       ; ...
04030C             0030*           ;       ret
04030C             0031*           macro JumpIf value, target
04030C             0032*           cp      value
04030C             0033*           jp      z, target
04030C             0034*           endmacro
04030C             0035*   
04030C             0036*   
04030C             0037*   ; CharOut must be defined elsewhere for HexByte and HexBytes to work
04030C             0038*   
04030C             0039*   ; Output a byte in hex
04030C             0040*   ;       A = byte to output
04030C             0041*   HexByte:
04030C F5          0042*           push    af
04030D 1F          0043*           rra
04030E 1F          0044*           rra
04030F 1F          0045*           rra
040310 1F          0046*           rra
040311 CD 2F 03 04 0047*           call    HexNybble
040315 CD 45 00 04 0048*           call    CharOut
040319 F1          0049*           pop     af
04031A CD 2F 03 04 0050*           call    HexNybble
04031E C3 45 00 04 0051*           jp      CharOut
040322             0052*   
040322             0053*   ; Output byte buffer in hex
040322             0054*   ;       HL = address of byte buffer
040322             0055*   ;       B = length of byte buffer
040322             0056*   HexBytes:
040322 7E          0057*           ld      a, (hl)
040323 CD 0C 03 04 0058*           call    HexByte
040327 CD 5A 00 04 0059*           call    Space
04032B 23          0060*           inc     hl
04032C 10 F4       0061*           djnz    HexBytes
04032E C9          0062*           ret
04032F             0063*   
04032F             0064*   ; convert lower nybble of A to hex (also in A)
04032F             0065*   ; from http://map.grauw.nl/sources/external/z80bits.html#5.1
04032F             0066*   HexNybble:
04032F F6 F0       0067*           or      0f0h
040331 27          0068*           daa
040332 C6 A0       0069*           add     a, 0a0h
040334 CE 40       0070*           adc     a, 40h
040336 C9          0071*           ret
040337             0072*   
040337             0073*   ; RandomSeed sets the seed from four bytes in screen buffer data offset by refresh register.
040337             0074*   RandomSeed:
040337 21 B0 16 04 0075*           ld      hl, ScreenBuffer
04033B ED 5F       0076*           ld      a, r
04033D 16 00       0077*           ld      d, 0
04033F 5F          0078*           ld      e, a
040340 19          0079*           add     hl, de
040341 06 04       0080*           ld      b, 4
040343 11 6D 03 04 0081*           ld      de, Seed1
040347             0082*   RandomSeedLoop:
040347 7E          0083*           ld      a, (hl)
040348 AD          0084*           xor     l
040349 12          0085*           ld      (de), a
04034A 23          0086*           inc     hl
04034B 13          0087*           inc     de
04034C 10 F9       0088*           djnz    RandomSeedLoop
04034E C9          0089*           ret
04034F             0090*   
04034F             0091*   ; RandomNumber generates a random number using combined LFSR/LCG PRNG with 16-bit seeds
04034F             0092*   ; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
04034F             0093*   RandomNumber:
04034F 2A 6D 03 04 0094*           ld      hl, (Seed1)
040353 44          0095*           ld      b, h
040354 4D          0096*           ld      c, l
040355 29          0097*           add     hl, hl
040356 29          0098*           add     hl, hl
040357 2C          0099*           inc     l
040358 09          0100*           add     hl, bc
040359 22 6D 03 04 0101*           ld      (Seed1), hl
04035D 2A 6F 03 04 0102*           ld      hl, (Seed2)
040361 29          0103*           add     hl, hl
040362 9F          0104*           sbc     a, a
040363 E6 2D       0105*           and     %00101101
040365 AD          0106*           xor     l
040366 6F          0107*           ld      l, a
040367 22 6F 03 04 0108*           ld      (Seed2), hl
04036B 09          0109*           add     hl, bc
04036C C9          0110*           ret
04036D             0111*   
04036D             0112*   Seed1:
04036D 00 00       0113*           defw    0
04036F             0114*   Seed2:
04036F 00 00       0115*           defw    0
040371             0116*   
040371             0117*   ; RandomSeries generates series of random numbers
040371             0118*   ; b = number of random numbers to generate
040371             0119*   ; c = mask for random numbers
040371             0120*   ; d = offset for random numbers
040371             0121*   RandomSeries:
040371 C5          0122*           push    bc
040372 E5          0123*           push    hl
040373 CD 4F 03 04 0124*           call    RandomNumber
040377 7D          0125*           ld      a, l
040378 B7          0126*           or      a
040379 E1          0127*           pop     hl
04037A C1          0128*           pop     bc
04037B FC 8B 03 04 0129*           call    m, RandomNeg
04037F F4 88 03 04 0130*           call    p, RandomPos
040383 77          0131*           ld      (hl), a
040384 23          0132*           inc     hl
040385 10 EA       0133*           djnz    RandomSeries
040387 C9          0134*           ret
040388             0135*   RandomPos:
040388 A1          0136*           and     c
040389 82          0137*           add     a, d
04038A C9          0138*           ret
04038B             0139*   RandomNeg:
04038B A1          0140*           and     c
04038C 82          0141*           add     a, d
04038D 2F          0142*           cpl
04038E 3C          0143*           inc     a
04038F C9          0144*           ret
040390             0050            include "data.inc"
040390             0001*   ; Data for plasma demo (sources credited individually below)
040390             0002*   
040390             0003*   ; Gradient patterns from Produkthandler Kom Her by Camelot: https://csdb.dk/release/?id=760
040390             0004*   Gradient:
040390 00 00 00 00 0005*       .db $00,$00,$00,$00,$00,$00,$00,$00
       00 00 00 00 
040398             0006*   GradientStride: equ $ - Gradient
040398             0007*       ;db $00,$00,$08,$00,$00,$00,$04,$00
040398 00 00 10 00 0008*       .db $00,$00,$10,$00,$40,$00,$04,$00
       40 00 04 00 
0403A0             0009*       ;db $00,$02,$10,$00,$40,$00,$04,$00
0403A0 00 02 10 00 0010*       .db $00,$02,$10,$00,$40,$00,$04,$20
       40 00 04 20 
0403A8             0011*       ;db $00,$02,$10,$02,$40,$00,$04,$20
0403A8 40 02 10 02 0012*       .db $40,$02,$10,$02,$40,$00,$04,$20
       40 00 04 20 
0403B0             0013*       ;db $40,$02,$10,$02,$40,$08,$04,$20
0403B0 40 02 10 02 0014*       .db $40,$02,$10,$02,$40,$08,$05,$20
       40 08 05 20 
0403B8             0015*       ;db $40,$02,$10,$02,$40,$88,$05,$20
0403B8 40 02 10 0A 0016*       .db $40,$02,$10,$0a,$40,$88,$05,$20
       40 88 05 20 
0403C0             0017*       ;db $44,$02,$10,$0a,$40,$88,$05,$20
0403C0 44 02 10 0A 0018*       .db $44,$02,$10,$0a,$41,$88,$05,$20
       41 88 05 20 
0403C8             0019*       ;db $44,$02,$50,$0a,$41,$88,$05,$20
0403C8 44 02 50 0A 0020*       .db $44,$02,$50,$0a,$41,$a8,$05,$20
       41 A8 05 20 
0403D0             0021*       ;db $44,$0a,$50,$0a,$41,$a8,$05,$20
0403D0 44 8A 50 0A 0022*       .db $44,$8a,$50,$0a,$41,$a8,$05,$20
       41 A8 05 20 
0403D8             0023*       ;db $44,$8a,$50,$0a,$41,$aa,$05,$20
0403D8 44 8A 50 0A 0024*       .db $44,$8a,$50,$0a,$51,$aa,$05,$20
       51 AA 05 20 
0403E0             0025*       ;db $44,$8a,$50,$0a,$51,$aa,$45,$20
0403E0 54 8A 50 0A 0026*       .db $54,$8a,$50,$0a,$51,$aa,$45,$20
       51 AA 45 20 
0403E8             0027*       ;db $54,$8a,$51,$0a,$51,$aa,$45,$20
0403E8 54 8A 51 0A 0028*       .db $54,$8a,$51,$0a,$51,$aa,$45,$28
       51 AA 45 28 
0403F0             0029*       ;db $54,$8a,$51,$2a,$51,$aa,$45,$28
0403F0 55 8A 51 2A 0030*       .db $55,$8a,$51,$2a,$51,$aa,$45,$28
       51 AA 45 28 
0403F8             0031*       ;db $55,$8a,$51,$2a,$55,$aa,$45,$28
0403F8 55 8A 51 2A 0032*       .db $55,$8a,$51,$2a,$55,$aa,$45,$2a
       55 AA 45 2A 
040400             0033*       ;db $55,$8a,$55,$2a,$55,$aa,$45,$2a
040400 55 8A 55 2A 0034*       .db $55,$8a,$55,$2a,$55,$aa,$45,$aa
       55 AA 45 AA 
040408             0035*       ;db $55,$8a,$55,$aa,$55,$aa,$45,$aa
040408 55 8A 55 AA 0036*       .db $55,$8a,$55,$aa,$55,$aa,$55,$aa
       55 AA 55 AA 
040410             0037*       ;db $55,$aa,$55,$aa,$55,$aa,$55,$aa
040410 55 AA 55 AA 0038*       .db $55,$aa,$55,$aa,$55,$aa,$55,$aa
       55 AA 55 AA 
040418             0039*       ;db $55,$aa,$55,$aa,$55,$aa,$75,$aa
040418 55 BA 55 AA 0040*       .db $55,$ba,$55,$aa,$55,$aa,$75,$aa
       55 AA 75 AA 
040420             0041*       ;db $55,$ba,$55,$aa,$d5,$aa,$75,$aa
040420 D5 BA 55 AA 0042*       .db $d5,$ba,$55,$aa,$d5,$aa,$75,$aa
       D5 AA 75 AA 
040428             0043*       ;db $d5,$ba,$55,$aa,$d5,$ae,$75,$aa
040428 D7 BA 55 AA 0044*       .db $d7,$ba,$55,$aa,$d5,$ae,$75,$aa
       D5 AE 75 AA 
040430             0045*       ;db $d7,$ba,$55,$ae,$d5,$ae,$75,$aa
040430 D7 BA 55 AE 0046*       .db $d7,$ba,$55,$ae,$d5,$ae,$75,$ab
       D5 AE 75 AB 
040438             0047*       ;db $d7,$ba,$55,$ae,$f5,$ae,$75,$ab
040438 DF BA 55 AE 0048*       .db $df,$ba,$55,$ae,$f5,$ae,$75,$ab
       F5 AE 75 AB 
040440             0049*       ;db $df,$ba,$55,$ae,$f5,$af,$75,$ab
040440 DF BA 55 AE 0050*       .db $df,$ba,$55,$ae,$f5,$af,$75,$bb
       F5 AF 75 BB 
040448             0051*       ;db $df,$fa,$55,$ae,$f5,$af,$75,$bb
040448 DF FA 55 BE 0052*       .db $df,$fa,$55,$be,$f5,$af,$75,$bb
       F5 AF 75 BB 
040450             0053*       ;db $df,$fa,$57,$be,$f5,$af,$75,$bb
040450 DF FA 57 BE 0054*       .db $df,$fa,$57,$be,$f5,$af,$f5,$bb
       F5 AF F5 BB 
040458             0055*       ;db $df,$fa,$57,$be,$f5,$af,$fd,$bb
040458 DF FA 77 BE 0056*       .db $df,$fa,$77,$be,$f5,$af,$fd,$bb
       F5 AF FD BB 
040460             0057*       ;db $df,$fa,$77,$be,$f5,$ef,$fd,$bb
040460 DF FA 77 BF 0058*       .db $df,$fa,$77,$bf,$f5,$ef,$fd,$bb
       F5 EF FD BB 
040468             0059*       ;db $df,$fa,$77,$bf,$f5,$ef,$fd,$bf
040468 DF FA 77 BF 0060*       .db $df,$fa,$77,$bf,$fd,$ef,$fd,$bf
       FD EF FD BF 
040470             0061*       ;db $df,$fa,$f7,$bf,$fd,$ef,$fd,$bf
040470 DF FB F7 BF 0062*       .db $df,$fb,$f7,$bf,$fd,$ef,$fd,$bf
       FD EF FD BF 
040478             0063*       ;db $df,$fb,$ff,$bf,$fd,$ef,$fd,$bf
040478 DF FB FF BF 0064*       .db $df,$fb,$ff,$bf,$fd,$ef,$fd,$ff
       FD EF FD FF 
040480             0065*       ;db $df,$fb,$ff,$bf,$ff,$ef,$fd,$ff
040480 FF FB FF BF 0066*       .db $ff,$fb,$ff,$bf,$ff,$ef,$fd,$ff
       FF EF FD FF 
040488             0067*       ;db $ff,$fb,$ff,$bf,$ff,$ef,$ff,$ff
040488 FF FB FF FF 0068*       .db $ff,$fb,$ff,$ff,$ff,$ef,$ff,$ff
       FF EF FF FF 
040490             0069*       ;db $ff,$ff,$ff,$ff,$ff,$ef,$ff,$ff
040490             0070*   GradientLength: equ $ - Gradient
040490             0071*   GradientCount: equ GradientLength / GradientStride
040490             0072*   GradientStart: equ 128
040490             0073*   
040490             0074*   ; C64 Palette RGB values from https://www.c64-wiki.com/wiki/Color
040490             0075*   C64PaletteRGB:
040490 00 00 00    0076*       .db $00,$00,$00    ; black
040493             0077*   C64PaletteRGBStride:   equ $ - C64PaletteRGB
040493 FF FF FF    0078*       .db $ff,$ff,$ff    ; white
040496 88 00 00    0079*       .db $88,$00,$00    ; red
040499 AA FF EE    0080*       .db $aa,$ff,$ee    ; cyan
04049C CC 44 CC    0081*       .db $cc,$44,$cc    ; purple
04049F 00 CC 55    0082*       .db $00,$cc,$55    ; green
0404A2 00 00 AA    0083*       .db $00,$00,$aa    ; blue
0404A5 EE EE 77    0084*       .db $ee,$ee,$77    ; yellow
0404A8 DD 88 55    0085*       .db $dd,$88,$55    ; orange
0404AB 66 44 00    0086*       .db $66,$44,$00    ; brown
0404AE FF 77 77    0087*       .db $ff,$77,$77    ; light red
0404B1 33 33 33    0088*       .db $33,$33,$33    ; dark grey
0404B4 77 77 77    0089*       .db $77,$77,$77    ; grey
0404B7 AA FF 66    0090*       .db $aa,$ff,$66    ; light green
0404BA 00 88 FF    0091*       .db $00,$88,$ff    ; light blue
0404BD BB BB BB    0092*       .db $bb,$bb,$bb    ; light grey
0404C0             0093*   C64PaletteRGBLength: equ $ - C64PaletteRGB
0404C0             0094*   C64PaletteRGBCount: equ C64PaletteRGBLength / C64PaletteRGBStride
0404C0             0095*   
0404C0             0096*   C64PaletteRGBA2222:
0404C0 C0          0097*       .db $c0             ; black
0404C1 FF          0098*       .db $ff             ; white
0404C2 C2          0099*       .db $c2             ; red
0404C3 FE          0100*       .db $fe             ; cyan
0404C4 E2          0101*       .db $e2             ; purple
0404C5 D8          0102*       .db $d8             ; green
0404C6 E0          0103*       .db $e0             ; blue
0404C7 DF          0104*       .db $df             ; yellow
0404C8 DB          0105*       .db $db             ; orange
0404C9 C6          0106*       .db $c6             ; brown
0404CA D7          0107*       .db $d7             ; light red
0404CB D5          0108*       .db $d5             ; dark grey
0404CC EA          0109*       .db $ea             ; grey
0404CD CE          0110*       .db $ce             ; light green
0404CE F4          0111*       .db $f4             ; light blue
0404CF EA          0112*       .db $ea             ; light grey
0404D0             0113*   C64PaletteRGBA2222Length: equ $ - C64PaletteRGBA2222
0404D0             0114*   
0404D0             0115*   ; mapping of C64 colors to nearest approximation on TMS9918A
0404D0             0116*   C64PaletteTMS:
0404D0 01          0117*       .db $01     ; black
0404D1 0F          0118*       .db $0f     ; white
0404D2 06          0119*       .db $06     ; red
0404D3 07          0120*       .db $07     ; cyan
0404D4 0D          0121*       .db $0d     ; purple
0404D5 02          0122*       .db $02     ; green -> medium green
0404D6 04          0123*       .db $04     ; blue
0404D7 0B          0124*       .db $0b     ; yellow
0404D8 09          0125*       .db $09     ; orange -> light red
0404D9 0A          0126*       .db $0a     ; brown -> dark yellow
0404DA 08          0127*       .db $08     ; light red -> medium red
0404DB 01          0128*       .db $01     ; dark grey -> black
0404DC 0E          0129*       .db $0e     ; grey
0404DD 03          0130*       .db $03     ; light green
0404DE 05          0131*       .db $05     ; light blue
0404DF 0E          0132*       .db $0e     ; light grey -> grey
0404E0             0133*   
0404E0             0134*   ; Predefined palettes from Plascii Petsma: https://csdb.dk/release/?id=159933
0404E0             0135*   ColorPalettes:
0404E0 00 0B 0C 0F 0136*       .db $0,$b,$c,$f,$1
       01          
0404E5             0137*   ColorPaletteStride: equ $ - ColorPalettes
0404E5 00 00 00 05 0138*       .db $0,$0,$0,$5,$5
       05          
0404EA 0D 03 0E 04 0139*       .db $d,$3,$e,$4,$2
       02          
0404EF 09 02 04 0B 0140*       .db $9,$2,$4,$b,$6
       06          
0404F4 06 0B 08 02 0141*       .db $6,$b,$8,$2,$2
       02          
0404F9 0A 0C 0E 05 0142*       .db $a,$c,$e,$5,$5
       05          
0404FE 06 0B 08 0A 0143*       .db $6,$b,$8,$a,$7
       07          
040503 0D 03 0C 08 0144*       .db $d,$3,$c,$8,$2
       02          
040508 01 03 0E 04 0145*       .db $1,$3,$e,$4,$2
       02          
04050D 0D 05 0B 04 0146*       .db $d,$5,$b,$4,$a
       0A          
040512 03 0E 0B 08 0147*       .db $3,$e,$b,$8,$a
       0A          
040517 0A 04 06 0E 0148*       .db $a,$4,$6,$e,$3
       03          
04051C 0A 08 09 0B 0149*       .db $a,$8,$9,$b,$e
       0E          
040521             0150*   ColorPaletteEnd:    equ $
040521             0151*   ColorPaletteLength: equ $ - ColorPalettes
040521             0152*   ColorPaletteCount:  equ ColorPaletteLength / ColorPaletteStride
040521             0153*   
040521             0154*   ; Pre-defined plasma parameters from Plascii Petsma: https://csdb.dk/release/?id=159933
040521             0155*   PlasmaParamList:
040521 FA 05 03 FA 0156*           defb    $fa,$05,$03,$fa,$07,$04,$fe,$fe
       07 04 FE FE 
040529 FE 01 FE 02 0157*           defb    $fe,$01,$fe,$02,$03,$ff,$02,$02
       03 FF 02 02 
040531 5E E8 EB 32 0158*           defb    $5e,$e8,$eb,$32,$69,$4f,$0a,$41
       69 4F 0A 41 
040539 FE FC       0159*           defb    $fe,$fc
04053B 06 07       0160*           defb    $06,$07
04053D FF          0161*           defb    $ff
04053E 01          0162*           defb    $01
04053F             0163*   
04053F 04 05 FC 02 0164*           defb    $04,$05,$fc,$02,$fc,$03,$02,$01
       FC 03 02 01 
040547 00 01 03 FD 0165*           defb    $00,$01,$03,$fd,$02,$fd,$fe,$00
       02 FD FE 00 
04054F 51 A1 55 C1 0166*           defb    $51,$a1,$55,$c1,$0d,$5a,$dd,$26
       0D 5A DD 26 
040557 FE FD       0167*           defb    $fe,$fd
040559 08 08       0168*           defb    $08,$08
04055B F8          0169*           defb    $f8
04055C 06          0170*           defb    $06
04055D             0171*   
04055D F9 06 FE FA 0172*           defb    $f9,$06,$fe,$fa,$fa,$00,$07,$fb
       FA 00 07 FB 
040565 02 01 02 03 0173*           defb    $02,$01,$02,$03,$03,$00,$fd,$00
       03 00 FD 00 
04056D 34 85 A6 11 0174*           defb    $34,$85,$a6,$11,$89,$2b,$fa,$9c
       89 2B FA 9C 
040575 FC FB       0175*           defb    $fc,$fb
040577 09 08       0176*           defb    $09,$08
040579 FA          0177*           defb    $fa
04057A 09          0178*           defb    $09
04057B             0179*   
04057B 00 01 03 00 0180*           defb    $00,$01,$03,$00,$01,$ff,$04,$fc
       01 FF 04 FC 
040583 01 FF 03 FE 0181*           defb    $01,$ff,$03,$fe,$fe,$03,$02,$02
       FE 03 02 02 
04058B F3 02 0B 89 0182*           defb    $f3,$02,$0b,$89,$8c,$d3,$23,$aa
       8C D3 23 AA 
040593 FE 01       0183*           defb    $fe,$01
040595 07 07       0184*           defb    $07,$07
040597 08          0185*           defb    $08
040598 0A          0186*           defb    $0a
040599             0187*   
040599 04 04 04 FC 0188*           defb    $04,$04,$04,$fc,$fd,$04,$ff,$fc
       FD 04 FF FC 
0405A1 01 02 02 01 0189*           defb    $01,$02,$02,$01,$ff,$00,$ff,$01
       FF 00 FF 01 
0405A9 3A 21 53 93 0190*           defb    $3a,$21,$53,$93,$39,$b7,$26,$99
       39 B7 26 99 
0405B1 FD FE       0191*           defb    $fd,$fe
0405B3 05 06       0192*           defb    $05,$06
0405B5 03          0193*           defb    $03
0405B6 04          0194*           defb    $04
0405B7             0195*   
0405B7 FD FD FD 02 0196*           defb    $fd,$fd,$fd,$02,$04,$00,$fd,$02
       04 00 FD 02 
0405BF 03 02 FD 02 0197*           defb    $03,$02,$fd,$02,$03,$fe,$ff,$ff
       03 FE FF FF 
0405C7 BC 99 5D 2F 0198*           defb    $bc,$99,$5d,$2f,$e6,$16,$af,$0e
       E6 16 AF 0E 
0405CF FD FF       0199*           defb    $fd,$ff
0405D1 07 07       0200*           defb    $07,$07
0405D3 F5          0201*           defb    $f5
0405D4 07          0202*           defb    $07
0405D5             0203*   
0405D5 FC 00 00 FF 0204*           defb    $fc,$00,$00,$ff,$04,$04,$00,$01
       04 04 00 01 
0405DD FD 03 00 02 0205*           defb    $fd,$03,$00,$02,$00,$03,$02,$03
       00 03 02 03 
0405E5 30 C7 07 60 0206*           defb    $30,$c7,$07,$60,$36,$2b,$e8,$ec
       36 2B E8 EC 
0405ED FF FE       0207*           defb    $ff,$fe
0405EF 09 03       0208*           defb    $09,$03
0405F1 F8          0209*           defb    $f8
0405F2 05          0210*           defb    $05
0405F3             0211*   
0405F3 FD FC FE 00 0212*           defb    $fd,$fc,$fe,$00,$00,$04,$fe,$01
       00 04 FE 01 
0405FB 03 03 FE 02 0213*           defb    $03,$03,$fe,$02,$00,$03,$fe,$00
       00 03 FE 00 
040603 21 D7 34 1B 0214*           defb    $21,$d7,$34,$1b,$5d,$eb,$8e,$7d
       5D EB 8E 7D 
04060B FD FF       0215*           defb    $fd,$ff
04060D 0A 03       0216*           defb    $0a,$03
04060F FD          0217*           defb    $fd
040610 03          0218*           defb    $03
040611             0219*   
040611 FE 00 FF 01 0220*           defb    $fe,$00,$ff,$01,$04,$02,$fe,$fd
       04 02 FE FD 
040619 02 01 FE 01 0221*           defb    $02,$01,$fe,$01,$03,$ff,$03,$ff
       03 FF 03 FF 
040621 0B 0F EA 8C 0222*           defb    $0b,$0f,$ea,$8c,$e0,$f8,$05,$0e
       E0 F8 05 0E 
040629 FC FD       0223*           defb    $fc,$fd
04062B 07 06       0224*           defb    $07,$06
04062D F8          0225*           defb    $f8
04062E 0C          0226*           defb    $0c
04062F             0227*   
04062F 33 04 34 FC 0228*           defb    $33,$04,$34,$fc,$dd,$24,$cf,$7c
       DD 24 CF 7C 
040637 C1 73 02 31 0229*           defb    $c1,$73,$02,$31,$fe,$a0,$ee,$01
       FE A0 EE 01 
04063F 3A 21 53 93 0230*           defb    $3a,$21,$53,$93,$39,$b7,$26,$99
       39 B7 26 99 
040647 00 00       0231*           defb    $00,$00
040649 04 01       0232*           defb    $04,$01
04064B FD          0233*           defb    $fd
04064C 00          0234*           defb    $00
04064D             0235*   
04064D FF 00 01 FF 0236*           defb    $ff,$00,$01,$ff,$02,$fe,$00,$02
       02 FE 00 02 
040655 FF 02 01 02 0237*           defb    $ff,$02,$01,$02,$fe,$01,$00,$00
       FE 01 00 00 
04065D 1D BB C5 A3 0238*           defb    $1d,$bb,$c5,$a3,$ab,$6c,$ed,$a6
       AB 6C ED A6 
040665 FD FE       0239*           defb    $fd,$fe
040667 03 03       0240*           defb    $03,$03
040669 F8          0241*           defb    $f8
04066A 08          0242*           defb    $08
04066B             0243*   
04066B 02 03 FD FD 0244*           defb    $02,$03,$fd,$fd,$01,$fc,$fd,$00
       01 FC FD 00 
040673 01 03 FD FE 0245*           defb    $01,$03,$fd,$fe,$fe,$03,$00,$00
       FE 03 00 00 
04067B 69 AC 3B C1 0246*           defb    $69,$ac,$3b,$c1,$fe,$21,$37,$84
       FE 21 37 84 
040683 FC FD       0247*           defb    $fc,$fd
040685 06 05       0248*           defb    $06,$05
040687 FA          0249*           defb    $fa
040688 0B          0250*           defb    $0b
040689             0251*   LastPlasmaParam:
040689             0252*   
040689             0253*   ; Sine table contains pre-computed sine values converted to 8-bit integers.
040689             0254*   ; Real sine values from -1 to 1 correspond to unsigned integers from 0 to 255.
040689             0255*   ; The first quarter of the period is pre-computed using python script:
040689             0256*   
040689             0257*   ; #!/usr/bin/python3
040689             0258*   ; import math
040689             0259*   ; amp = 0xfe
040689             0260*   ; for i in range(0, 0x40):
040689             0261*   ;     sin = 2 + amp / 2 + amp * 0.499999 * math.sin(i / (0x100 / 2 / math.pi))
040689             0262*   ;     if i & 7 == 0:
040689             0263*   ;         print("defb    ", end="")
040689             0264*   ;     print(hex(int(sin)).replace("0x", "$"), end="\n" if i & 7 == 7 else ",")
040689             0265*   
040689             0266*   SineSrc:
040689 81 84 87 8A 0267*           defb    $81,$84,$87,$8a,$8d,$90,$93,$96
       8D 90 93 96 
040691 99 9C 9F A2 0268*           defb    $99,$9c,$9f,$a2,$a5,$a8,$ab,$ae
       A5 A8 AB AE 
040699 B1 B4 B7 BA 0269*           defb    $b1,$b4,$b7,$ba,$bc,$bf,$c2,$c4
       BC BF C2 C4 
0406A1 C7 CA CC CF 0270*           defb    $c7,$ca,$cc,$cf,$d1,$d3,$d6,$d8
       D1 D3 D6 D8 
0406A9 DA DC DF E1 0271*           defb    $da,$dc,$df,$e1,$e3,$e5,$e7,$e8
       E3 E5 E7 E8 
0406B1 EA EC ED EF 0272*           defb    $ea,$ec,$ed,$ef,$f1,$f2,$f3,$f5
       F1 F2 F3 F5 
0406B9 F6 F7 F8 F9 0273*           defb    $f6,$f7,$f8,$f9,$fa,$fb,$fc,$fc
       FA FB FC FC 
0406C1 FD FE FE FF 0274*           defb    $fd,$fe,$fe,$ff,$ff,$ff,$ff,$ff
       FF FF FF FF 
0406C9             0051            include "gradient.inc"
0406C9             0001*   ; Palette Gradient Tools
0406C9             0002*   ; Copyright 2024 J.B. Langston
0406C9             0003*   ;
0406C9             0004*   ; Permission is hereby granted, free of charge, to any person obtaining a
0406C9             0005*   ; copy of this software and associated documentation files (the "Software"),
0406C9             0006*   ; to deal in the Software without restriction, including without limitation
0406C9             0007*   ; the rights to use, copy, modify, merge, publish, distribute, sublicense,
0406C9             0008*   ; and/or sell copies of the Software, and to permit persons to whom the
0406C9             0009*   ; Software is furnished to do so, subject to the following conditions:
0406C9             0010*   ;
0406C9             0011*   ; The above copyright notice and this permission notice shall be included in
0406C9             0012*   ; all copies or substantial portions of the Software.
0406C9             0013*   ;
0406C9             0014*   ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
0406C9             0015*   ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
0406C9             0016*   ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
0406C9             0017*   ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
0406C9             0018*   ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
0406C9             0019*   ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
0406C9             0020*   ; DEALINGS IN THE SOFTWARE.
0406C9             0021*   
0406C9             0022*   ; =============================================================================
0406C9             0023*   ; Constants
0406C9             0024*   
0406C9             0025*   GradientChars: equ 256
0406C9             0026*   SegmentCount: equ GradientChars/GradientCount
0406C9             0027*   
0406C9             0028*   TileWidth: equ 8
0406C9             0029*   TileHeight: equ GradientStride
0406C9             0030*   TileSize: equ TileWidth*TileHeight
0406C9             0031*   
0406C9             0032*   
0406C9             0033*   ; =============================================================================
0406C9             0034*   ; Scratch area
0406C9             0035*   
0406C9             0036*   TempTileBuffer:
0406C9             0037*       defs TileSize
040709             0038*   TempTileBufferLength: equ $ - TempTileBuffer
040709             0039*   
040709             0040*   TempColorBuffer:
040709             0041*       defs SegmentCount*2
040719             0042*   TempColorBufferLength: equ $ - TempColorBuffer
040719             0043*   
040719             0044*   BitmapCounter:
040719 00 00       0045*       defw 0
04071B             0046*   
04071B             0047*   
04071B             0048*   ; =============================================================================
04071B             0049*   ; Macros
04071B             0050*   
04071B             0051*       ; Store the foreground + background pair in a color ramp
04071B             0052*       macro LoadColor dest, index
04071B             0053*           push hl
04071B             0054*           ld e, index
04071B             0055*           add hl, de
04071B             0056*           ld a, (hl)
04071B             0057*           ld dest, a
04071B             0058*           pop hl
04071B             0059*       endmacro
04071B             0060*   
04071B             0061*   
04071B             0062*   ; =============================================================================
04071B             0063*   ; Routines
04071B             0064*   
04071B             0065*   ; Generate foreground and background pairs from Plascii-style color scheme
04071B             0066*   ; HL = pointer to RGBA2222 color definitions
04071B             0067*   ; IX = pointer to palette
04071B             0068*   MakeColorRamp:
04071B FD 21 09 07 0069*       ld iy, TempColorBuffer
       04          
040720 11 00 00 00 0070*       ld de, 0
040724 06 04       0071*       ld b, SegmentCount/2
040726             0072*   MakeColorRampAsc:               ; load colors into lookup in ascending order
040726             0073*       LoadColor (iy+0), (ix+0)            ; foreground
040726 E5          0001*M          push hl
040727 DD 5E 00    0002*M          ld e, index
04072A 19          0003*M          add hl, de
04072B 7E          0004*M          ld a, (hl)
04072C FD 77 00    0005*M          ld dest, a
04072F E1          0006*M          pop hl
040730             0074*       LoadColor (iy+SegmentCount), (ix+1) ; background
040730 E5          0001*M          push hl
040731 DD 5E 01    0002*M          ld e, index
040734 19          0003*M          add hl, de
040735 7E          0004*M          ld a, (hl)
040736 FD 77 08    0005*M          ld dest, a
040739 E1          0006*M          pop hl
04073A DD 23       0075*       inc ix
04073C FD 23       0076*       inc iy
04073E 10 E6       0077*       djnz MakeColorRampAsc
040740 06 04       0078*       ld b, SegmentCount/2
040742             0079*   MakeColorRampDesc:              ; load colors into lookup in descending order
040742             0080*       LoadColor (iy+0), (ix+0)            ; foreground
040742 E5          0001*M          push hl
040743 DD 5E 00    0002*M          ld e, index
040746 19          0003*M          add hl, de
040747 7E          0004*M          ld a, (hl)
040748 FD 77 00    0005*M          ld dest, a
04074B E1          0006*M          pop hl
04074C             0081*       LoadColor (iy+SegmentCount), (ix-1) ; background
04074C E5          0001*M          push hl
04074D DD 5E FF    0002*M          ld e, index
040750 19          0003*M          add hl, de
040751 7E          0004*M          ld a, (hl)
040752 FD 77 08    0005*M          ld dest, a
040755 E1          0006*M          pop hl
040756 DD 2B       0082*       dec ix
040758 FD 23       0083*       inc iy
04075A 10 E6       0084*       djnz MakeColorRampDesc
04075C C9          0085*       ret
04075D             0086*   
04075D             0087*   
04075D             0088*   ; Show all the gradient bitmaps, one after the other
04075D             0089*   ShowGradientBitmaps:
04075D AF          0090*       xor a
04075E             0091*   ShowGradientBitmapsLoop:
04075E CD 27 02 04 0092*       call SendChar
040762 3C          0093*       inc a
040763 C2 5E 07 04 0094*       jp nz, ShowGradientBitmapsLoop
040767 C9          0095*       ret
040768             0096*   
040768             0097*   
040768             0098*   ; Map all characters to selected gradient bitmaps
040768             0099*   ; Params:
040768             0100*   ;   DE = starting bitmap ID
040768             0101*   SetGradient:
040768 C5          0102*       push bc
040769 D5          0103*       push de
04076A 0E 00       0104*       ld c, 0
04076C             0105*   SetGradientLoop:
04076C CD E0 01 04 0106*       call MapCharToBitmap
040770 13          0107*       inc de
040771 0C          0108*       inc c
040772 C2 6C 07 04 0109*       jp nz, SetGradientLoop
040776 D1          0110*       pop de
040777 C1          0111*       pop bc
040778 C9          0112*       ret
040779             0113*   
040779             0114*   
040779             0115*   LoadPalette:
040779 11 00 00 00 0116*       ld de, 0
04077D 3A 44 0E 04 0117*       ld a, (ColorPalette)
040781 57          0118*       ld d, a
040782 CD 68 07 04 0119*       call SetGradient
040786 3C          0120*       inc a
040787 C9          0121*       ret
040788             0122*   
040788             0123*   
040788             0124*   ; Load a single segment of the gradient with specified foreground/background color
040788             0125*   ; Params:
040788             0126*   ;   B = background color
040788             0127*   ;   C = foreground color
040788             0128*   LoadGradientSegment:
040788 21 90 03 04 0129*       ld hl, Gradient
04078C 3E 20       0130*       ld a, GradientCount
04078E             0131*   LoadGradientSegmentLoop:
04078E 11 C9 06 04 0132*       ld de, TempTileBuffer
040792 CD 3C 08 04 0133*       call MakeTile
040796 E5          0134*       push hl
040797 C5          0135*       push bc
040798 21 C9 06 04 0136*       ld hl, TempTileBuffer
04079C 01 40 00 00 0137*       ld bc, TempTileBufferLength
0407A0 ED 5B 19 07 0138*       ld de, (BitmapCounter)
       04          
0407A5 CD 1B 08 04 0139*       call SendTile
0407A9 C1          0140*       pop bc
0407AA E1          0141*       pop hl
0407AB 13          0142*       inc de
0407AC ED 53 19 07 0143*       ld (BitmapCounter), de
       04          
0407B1 3D          0144*       dec a
0407B2 C2 8E 07 04 0145*       jp nz, LoadGradientSegmentLoop
0407B6 C9          0146*       ret
0407B7             0147*   
0407B7             0148*   ; Load bitmaps for gradient of the currently loaded colors
0407B7             0149*   ; Params:
0407B7             0150*   ;   DE = starting bitmap number
0407B7             0151*   ;   HL = pointer to ARGB2222 palette
0407B7             0152*   ;   IX = pointer to color scheme
0407B7             0153*   LoadGradientBitmaps:
0407B7 CD 1B 07 04 0154*       call MakeColorRamp
0407BB DD 21 09 07 0155*       ld ix, TempColorBuffer
       04          
0407C0 06 08       0156*       ld b, 8
0407C2             0157*   LoadGradientBitmapsLoop:
0407C2 C5          0158*       push bc
0407C3 DD 4E 00    0159*       ld c, (ix+0)
0407C6 DD 46 08    0160*       ld b, (ix+8)
0407C9 CD 88 07 04 0161*       call LoadGradientSegment
0407CD DD 23       0162*       inc ix
0407CF C1          0163*       pop bc
0407D0 10 F0       0164*       djnz LoadGradientBitmapsLoop
0407D2 C9          0165*       ret
0407D3             0166*   
0407D3             0167*   
0407D3             0168*   LoadAllGradientsMessage:
0407D3 4C 6F 61 64 0169*       defb "Loading color gradients", EOS
       69 6E 67 20 
       63 6F 6C 6F 
       72 20 67 72 
       61 64 69 65 
       6E 74 73 00 
0407EB             0170*   
0407EB             0171*   LoadAllGradients:
0407EB 21 D3 07 04 0172*       ld hl, LoadAllGradientsMessage
0407EF CD 48 00 04 0173*       call StringOut
0407F3 21 C0 04 04 0174*       ld hl, C64PaletteRGBA2222
0407F7 DD 21 E0 04 0175*       ld ix, ColorPalettes
       04          
0407FC 06 0D       0176*       ld b, ColorPaletteCount
0407FE             0177*   LoadAllGradientsLoop:
0407FE C5          0178*       push bc
0407FF E5          0179*       push hl
040800 DD E5       0180*       push ix
040802 CD B7 07 04 0181*       call LoadGradientBitmaps
040806 DD E1       0182*       pop ix
040808 E1          0183*       pop hl
040809 01 05 00 00 0184*       ld bc, ColorPaletteStride
04080D DD 09       0185*       add ix, bc
04080F             0186*       SendByte '.'
04080F 3E 2E       0001*M          ld a, value
040811 5B D7       0002*M          rst.lil $10
040813 C1          0187*       pop bc
040814 10 E8       0188*       djnz LoadAllGradientsLoop
040816 CD 61 00 04 0189*       call NewLine
04081A C9          0190*       ret
04081B             0191*   
04081B             0192*   ; Send the 8x8 RGBA2222 tile bitmap from the source buffer to the VDP
04081B             0193*   ; Params:
04081B             0194*   ;   HL = bitmap source buffer address
04081B             0195*   ;   BC = bitmap length
04081B             0196*   ;   DE = bitmap ID
04081B             0197*   SendTile:
04081B CD 4D 01 04 0198*       call ClearBuffer
04081F CD 7F 01 04 0199*       call SendBufferBlock
040823 CD AD 01 04 0200*       call SelectBitmapBuffer
040827 C5          0201*       push bc
040828 D5          0202*       push de
040829 E5          0203*       push hl
04082A 01 08 00 00 0204*       ld bc, 8
04082E 11 08 00 00 0205*       ld de, 8
040832 2E 01       0206*       ld l, VduBitmapFormatRGBA2222
040834 CD C2 01 04 0207*       call CreateBitmapFromBuffer
040838 E1          0208*       pop hl
040839 D1          0209*       pop de
04083A C1          0210*       pop bc
04083B C9          0211*       ret
04083C             0212*   
04083C             0213*   ; Make an 8x8 RGBA2222 bitmap with specified colors from an 8x8 mono bitmap
04083C             0214*   ; Params:
04083C             0215*   ;   HL = pointer to monochrome bitmap
04083C             0216*   ;   DE = tile output buffer
04083C             0217*   ;   B = background color
04083C             0218*   ;   C = foreground color
04083C             0219*   MakeTile:
04083C F5          0220*       push af
04083D 3E 08       0221*       ld a, TileHeight
04083F             0222*   MakeTileRowLoop:
04083F F5          0223*       push af
040840 7E          0224*       ld a, (hl)
040841 CD 4E 08 04 0225*       call MakeTileRow
040845 F1          0226*       pop af
040846 23          0227*       inc hl
040847 3D          0228*       dec a
040848 C2 3F 08 04 0229*       jp nz, MakeTileRowLoop
04084C F1          0230*       pop af
04084D C9          0231*       ret
04084E             0232*   
04084E             0233*   
04084E             0234*   ; make a single row of bytes in an 8x8 tile bitmap
04084E             0235*   ; DE = output pointer
04084E             0236*   ; A = bitmap
04084E             0237*   ; B = background color in RGBA2222 format
04084E             0238*   ; C = foreground color in RGBA2222 format
04084E             0239*   MakeTileRow:
04084E EB          0240*       ex de, hl
04084F D5          0241*       push de
040850 16 08       0242*       ld d, TileWidth
040852             0243*   MakeTileColLoop:
040852 87          0244*       add a, a
040853 70          0245*       ld (hl), b
040854 DA 59 08 04 0246*       jp c, MakeTileNextCol
040858 71          0247*       ld (hl), c
040859             0248*   MakeTileNextCol:
040859 23          0249*       inc hl
04085A 15          0250*       dec d
04085B C2 52 08 04 0251*       jp nz, MakeTileColLoop
04085F D1          0252*       pop de
040860 EB          0253*       ex de, hl
040861 C9          0254*       ret
040862             0052    
040862             0053    ; =============================================================================
040862             0054    ; constants
040862             0055    
040862             0056    NumSinePnts:    equ 8
040862             0057    NumSineSpeeds:  equ 2
040862             0058    NumPlasmaFreqs: equ 2
040862             0059    NumCycleSpeeds: equ 1
040862             0060    
040862             0061    ; =============================================================================
040862             0062    ; central dispatch
040862             0063    
040862             0064    Main:                                   ; initialization tasks
040862 CD 37 03 04 0065            call    RandomSeed
040866 CD 58 0F 04 0066            call    MakeSineTable
04086A CD 2A 0F 04 0067            call    MakeSpeedCode
04086E CD 75 02 04 0068            call    InitGraphics
040872 CD F7 0D 04 0069            call    FirstEffect
040876 CD 0A 03 04 0070            call    EnableInterrupt
04087A             0071    
04087A             0072    MainLoop:                               ; repetitive tasks
04087A 3A 7A 0C 04 0073            ld      a, (HoldEffect)
04087E B7          0074            or      a
04087F C2 8C 08 04 0075            jp      nz, NoEffectCycle
040883 21 D2 0D 04 0076            ld      hl, DurationCnt
040887 35          0077            dec     (hl)
040888 CC D6 0D 04 0078            call    z, NextEffect
04088C             0079    NoEffectCycle:
04088C CD D9 0E 04 0080            call    CalcPlasmaFrame
040890 CD FD 02 04 0081            call    DrawScreen
040894 CD 8C 02 04 0082            call    GetKey
040898             0083            JumpIf  'q', Exit               ; must be handled from main
040898 FE 71       0001M           cp      value
04089A CA 65 02 04 0002M           jp      z, target
04089E CD A6 08 04 0084            call    Dispatch
0408A2 C3 7A 08 04 0085            jp      MainLoop
0408A6             0086    
0408A6             0087    Dispatch:
0408A6             0088            ; did you remember to add your new command to the help below?
0408A6             0089            JumpIf  '?', ShowHelp
0408A6 FE 3F       0001M           cp      value
0408A8 CA 0B 03 04 0002M           jp      z, target
0408AC             0090            JumpIf  'p', NextPalette
0408AC FE 70       0001M           cp      value
0408AE CA 45 0E 04 0002M           jp      z, target
0408B2             0091            JumpIf  'h', ToggleHold
0408B2 FE 68       0001M           cp      value
0408B4 CA 96 0C 04 0002M           jp      z, target
0408B8             0092            JumpIf  'n', NextEffect
0408B8 FE 6E       0001M           cp      value
0408BA CA D6 0D 04 0002M           jp      z, target
0408BE             0093            JumpIf  'd', InitEffect
0408BE FE 64       0001M           cp      value
0408C0 CA FF 0D 04 0002M           jp      z, target
0408C4             0094            JumpIf  'a', ToggleAnimation
0408C4 FE 61       0001M           cp      value
0408C6 CA 88 0C 04 0002M           jp      z, target
0408CA             0095            JumpIf  'r', ToggleRandomParams
0408CA FE 72       0001M           cp      value
0408CC CA 7D 0C 04 0002M           jp      z, target
0408D0             0096            JumpIf  'v', ViewParameters
0408D0 FE 76       0001M           cp      value
0408D2 CA 13 0D 04 0002M           jp      z, target
0408D6             0097            JumpIf  'x', SelectSineAddsX
0408D6 FE 78       0001M           cp      value
0408D8 CA 1A 0C 04 0002M           jp      z, target
0408DC             0098            JumpIf  'y', SelectSineAddsY
0408DC FE 79       0001M           cp      value
0408DE CA 24 0C 04 0002M           jp      z, target
0408E2             0099            JumpIf  'i', SelectSineStartsY
0408E2 FE 69       0001M           cp      value
0408E4 CA 2E 0C 04 0002M           jp      z, target
0408E8             0100            JumpIf  'c', SelectSineSpeeds
0408E8 FE 63       0001M           cp      value
0408EA CA 38 0C 04 0002M           jp      z, target
0408EE             0101            JumpIf  's', SelectPlasmaFreqs
0408EE FE 73       0001M           cp      value
0408F0 CA 42 0C 04 0002M           jp      z, target
0408F4             0102            JumpIf  'f', SelectCycleSpeed
0408F4 FE 66       0001M           cp      value
0408F6 CA 4C 0C 04 0002M           jp      z, target
0408FA             0103            JumpIf  '0', ClearParameters
0408FA FE 30       0001M           cp      value
0408FC CA A1 0C 04 0002M           jp      z, target
040900             0104            JumpIf  '>', IncSelected
040900 FE 3E       0001M           cp      value
040902 CA 6E 0C 04 0002M           jp      z, target
040906             0105            JumpIf  '<', DecSelected
040906 FE 3C       0001M           cp      value
040908 CA 74 0C 04 0002M           jp      z, target
04090C C9          0106            ret
04090D             0107    
04090D             0108    Help:
04090D 0D 0A 43 6F 0109            defb    CR, LF, "Commands:", CR, LF
       6D 6D 61 6E 
       64 73 3A 0D 
       0A          
04091A 20 3F 20 20 0110            defb    " ?     help", CR, LF
       20 20 20 68 
       65 6C 70 0D 
       0A          
040927 20 71 20 20 0111            defb    " q     quit", CR, LF
       20 20 20 71 
       75 69 74 0D 
       0A          
040934 20 68 20 20 0112            defb    " h     hold current effect on/off", CR, LF
       20 20 20 68 
       6F 6C 64 20 
       63 75 72 72 
       65 6E 74 20 
       65 66 66 65 
       63 74 20 6F 
       6E 2F 6F 66 
       66 0D 0A    
040957 20 70 20 20 0113            defb    " p     switch palette", CR, LF
       20 20 20 73 
       77 69 74 63 
       68 20 70 61 
       6C 65 74 74 
       65 0D 0A    
04096E 20 6E 20 20 0114            defb    " n     next effect", CR, LF
       20 20 20 6E 
       65 78 74 20 
       65 66 66 65 
       63 74 0D 0A 
040982 20 64 20 20 0115            defb    " d     default values", CR, LF
       20 20 20 64 
       65 66 61 75 
       6C 74 20 76 
       61 6C 75 65 
       73 0D 0A    
040999 20 61 20 20 0116            defb    " a     animation on/off", CR, LF
       20 20 20 61 
       6E 69 6D 61 
       74 69 6F 6E 
       20 6F 6E 2F 
       6F 66 66 0D 
       0A          
0409B2 20 72 20 20 0117            defb    " r     toggle random/playlist", CR, LF
       20 20 20 74 
       6F 67 67 6C 
       65 20 72 61 
       6E 64 6F 6D 
       2F 70 6C 61 
       79 6C 69 73 
       74 0D 0A    
0409D1 20 76 20 20 0118            defb    " v     view parameters", CR, LF, CR, LF
       20 20 20 76 
       69 65 77 20 
       70 61 72 61 
       6D 65 74 65 
       72 73 0D 0A 
       0D 0A       
0409EB 50 61 72 61 0119            defb    "Parameter Selection:", CR, LF
       6D 65 74 65 
       72 20 53 65 
       6C 65 63 74 
       69 6F 6E 3A 
       0D 0A       
040A01 20 78 20 20 0120            defb    " x     x increments", CR, LF
       20 20 20 78 
       20 69 6E 63 
       72 65 6D 65 
       6E 74 73 0D 
       0A          
040A16 20 79 20 20 0121            defb    " y     y increments", CR, LF
       20 20 20 79 
       20 69 6E 63 
       72 65 6D 65 
       6E 74 73 0D 
       0A          
040A2B 20 69 20 20 0122            defb    " i     initial values", CR, LF
       20 20 20 69 
       6E 69 74 69 
       61 6C 20 76 
       61 6C 75 65 
       73 0D 0A    
040A42 20 63 20 20 0123            defb    " c     linear animation speed", CR, LF
       20 20 20 6C 
       69 6E 65 61 
       72 20 61 6E 
       69 6D 61 74 
       69 6F 6E 20 
       73 70 65 65 
       64 0D 0A    
040A61 20 73 20 20 0124            defb    " s     sine animation speeds", CR, LF
       20 20 20 73 
       69 6E 65 20 
       61 6E 69 6D 
       61 74 69 6F 
       6E 20 73 70 
       65 65 64 73 
       0D 0A       
040A7F 20 66 20 20 0125            defb    " f     distortion frequencies", CR, LF, CR, LF
       20 20 20 64 
       69 73 74 6F 
       72 74 69 6F 
       6E 20 66 72 
       65 71 75 65 
       6E 63 69 65 
       73 0D 0A 0D 
       0A          
040AA0 50 61 72 61 0126            defb    "Parameter Modification:", CR, LF
       6D 65 74 65 
       72 20 4D 6F 
       64 69 66 69 
       63 61 74 69 
       6F 6E 3A 0D 
       0A          
040AB9 20 31 2D 38 0127            defb    " 1-8   increment selected parameter (+ shift to decrement)", CR, LF
       20 20 20 69 
       6E 63 72 65 
       6D 65 6E 74 
       20 73 65 6C 
       65 63 74 65 
       64 20 70 61 
       72 61 6D 65 
       74 65 72 20 
       28 2B 20 73 
       68 69 66 74 
       20 74 6F 20 
       64 65 63 72 
       65 6D 65 6E 
       74 29 0D 0A 
040AF5 20 30 20 20 0128            defb    " 0     clear selected parameters", CR, LF, EOS
       20 20 20 63 
       6C 65 61 72 
       20 73 65 6C 
       65 63 74 65 
       64 20 70 61 
       72 61 6D 65 
       74 65 72 73 
       0D 0A 00    
040B18             0129    
040B18             0130    About:
040B18 50 6C 61 73 0131            defb    "Plasma for TMS9918", CR, LF
       6D 61 20 66 
       6F 72 20 54 
       4D 53 39 39 
       31 38 0D 0A 
040B2C 5A 38 30 20 0132            defb    "Z80 Code by J.B. Langston", CR, LF, CR, LF
       43 6F 64 65 
       20 62 79 20 
       4A 2E 42 2E 
       20 4C 61 6E 
       67 73 74 6F 
       6E 0D 0A 0D 
       0A          
040B49 43 6F 6C 6F 0133            defb    "Color Palettes and Sine Routines ported from "
       72 20 50 61 
       6C 65 74 74 
       65 73 20 61 
       6E 64 20 53 
       69 6E 65 20 
       52 6F 75 74 
       69 6E 65 73 
       20 70 6F 72 
       74 65 64 20 
       66 72 6F 6D 
       20          
040B76 50 6C 61 73 0134            defb    "Plascii Petsma by Cruzer/Camelot", CR, LF
       63 69 69 20 
       50 65 74 73 
       6D 61 20 62 
       79 20 43 72 
       75 7A 65 72 
       2F 43 61 6D 
       65 6C 6F 74 
       0D 0A       
040B98 47 72 61 64 0135            defb    "Gradient Patterns ripped from "
       69 65 6E 74 
       20 50 61 74 
       74 65 72 6E 
       73 20 72 69 
       70 70 65 64 
       20 66 72 6F 
       6D 20       
040BB6 50 72 6F 64 0136            defb    "Produkthandler Kom Her by Cruzer/Camelot", CR, LF, CR, LF
       75 6B 74 68 
       61 6E 64 6C 
       65 72 20 4B 
       6F 6D 20 48 
       65 72 20 62 
       79 20 43 72 
       75 7A 65 72 
       2F 43 61 6D 
       65 6C 6F 74 
       0D 0A 0D 0A 
040BE2 50 72 65 73 0137            defb    "Press 'q' to quit, '?' for help.", CR, LF, EOS
       73 20 27 71 
       27 20 74 6F 
       20 71 75 69 
       74 2C 20 27 
       3F 27 20 66 
       6F 72 20 68 
       65 6C 70 2E 
       0D 0A 00    
040C05             0138    
040C05             0139    ; =============================================================================
040C05             0140    ; parameter configuration
040C05             0141    
040C05             0142    SelectedParameter:
040C05             0143            DefPointer SineAddsX
040C05 27 0E 04    0001M           .dl addr
040C08             0144    SelectedParameterLength:
040C08 08          0145            defb    NumSinePnts
040C09             0146    SelectedParameterNumber:
040C09 00          0147            defb    0
040C0A             0148    
040C0A             0149    SelectParameterNumber:
040C0A             0150            ; for numbers 1-8 set the parameter number
040C0A D6 31       0151            sub     '1'
040C0C D8          0152            ret     c
040C0D 21 09 0C 04 0153            ld      hl, SelectedParameterNumber
040C11 BE          0154            cp      (hl)
040C12 D0          0155            ret     nc
040C13 32 09 0C 04 0156            ld      (SelectedParameterNumber), a
040C17             0157    InvalidParameterNumber:
040C17 C6 31       0158            add     '1'
040C19 C9          0159            ret
040C1A             0160    
040C1A             0161            macro SelectParam addr, length
040C1A             0162            ld      hl, addr
040C1A             0163            ld      a, length
040C1A             0164            jp      SelectGeneric
040C1A             0165            endmacro
040C1A             0166    
040C1A             0167    SelectSineAddsX:
040C1A             0168            SelectParam SineAddsX, NumSinePnts
040C1A 21 27 0E 04 0001M           ld      hl, addr
040C1E 3E 08       0002M           ld      a, length
040C20 C3 56 0C 04 0003M           jp      SelectGeneric
040C24             0169    SelectSineAddsY:
040C24             0170            SelectParam SineAddsY, NumSinePnts
040C24 21 2F 0E 04 0001M           ld      hl, addr
040C28 3E 08       0002M           ld      a, length
040C2A C3 56 0C 04 0003M           jp      SelectGeneric
040C2E             0171    SelectSineStartsY:
040C2E             0172            SelectParam SineStartsY, NumSinePnts
040C2E 21 37 0E 04 0001M           ld      hl, addr
040C32 3E 08       0002M           ld      a, length
040C34 C3 56 0C 04 0003M           jp      SelectGeneric
040C38             0173    SelectSineSpeeds:
040C38             0174            SelectParam SineSpeeds, NumSineSpeeds
040C38 21 3F 0E 04 0001M           ld      hl, addr
040C3C 3E 02       0002M           ld      a, length
040C3E C3 56 0C 04 0003M           jp      SelectGeneric
040C42             0175    SelectPlasmaFreqs:
040C42             0176            SelectParam PlasmaFreqs, NumPlasmaFreqs
040C42 21 41 0E 04 0001M           ld      hl, addr
040C46 3E 02       0002M           ld      a, length
040C48 C3 56 0C 04 0003M           jp      SelectGeneric
040C4C             0177    SelectCycleSpeed:
040C4C             0178            SelectParam CycleSpeed, NumCycleSpeeds
040C4C 21 43 0E 04 0001M           ld      hl, addr
040C50 3E 01       0002M           ld      a, length
040C52 C3 56 0C 04 0003M           jp      SelectGeneric
040C56             0179    
040C56             0180    SelectGeneric:
040C56 22 05 0C 04 0181            ld      (SelectedParameter), hl
040C5A 32 08 0C 04 0182            ld      (SelectedParameterLength), a
040C5E C9          0183            ret
040C5F             0184    
040C5F             0185    GetSelected:
040C5F 2A 05 0C 04 0186            ld      hl, (SelectedParameter)
040C63 3A 09 0C 04 0187            ld      a, (SelectedParameterNumber)
040C67 11 00 00 00 0188            ld      de, 0
040C6B 5F          0189            ld      e, a
040C6C 19          0190            add     hl, de
040C6D C9          0191            ret
040C6E             0192    
040C6E             0193    IncSelected:
040C6E CD 5F 0C 04 0194            call    GetSelected
040C72 34          0195            inc     (hl)
040C73 C9          0196            ret
040C74             0197    
040C74             0198    DecSelected:
040C74 CD 5F 0C 04 0199            call    GetSelected
040C78 35          0200            dec     (hl)
040C79 C9          0201            ret
040C7A             0202    
040C7A             0203    ; feature toggles
040C7A             0204    HoldEffect:
040C7A 00          0205            defb    0
040C7B             0206    StopAnimation:
040C7B 00          0207            defb    0
040C7C             0208    UseRandomParams:
040C7C 00          0209            defb    0
040C7D             0210    
040C7D             0211    ToggleRandomParams:
040C7D 3A 7C 0C 04 0212            ld      a, (UseRandomParams)
040C81 EE FF       0213            xor     $ff
040C83 32 7C 0C 04 0214            ld      (UseRandomParams), a
040C87 C9          0215            ret
040C88             0216    
040C88             0217    ToggleAnimation:
040C88 3A 7B 0C 04 0218            ld      a, (StopAnimation)
040C8C EE FF       0219            xor     $ff
040C8E 32 7B 0C 04 0220            ld      (StopAnimation), a
040C92 C3 BA 0E 04 0221            jp      UpdateScreen
040C96             0222    
040C96             0223    ToggleHold:
040C96 3A 7A 0C 04 0224            ld      a, (HoldEffect)
040C9A EE FF       0225            xor     $ff
040C9C 32 7A 0C 04 0226            ld      (HoldEffect), a
040CA0 C9          0227            ret
040CA1             0228    
040CA1             0229    ; reset selected parameter values to 0
040CA1             0230    ClearParameters:
040CA1 2A 05 0C 04 0231            ld      hl, (SelectedParameter)
040CA5 3A 08 0C 04 0232            ld      a, (SelectedParameterLength)
040CA9 47          0233            ld      b, a
040CAA AF          0234            xor     a
040CAB             0235    ClearParameterLoop:
040CAB 77          0236            ld      (hl), a
040CAC 23          0237            inc     hl
040CAD 10 FC       0238            djnz    ClearParameterLoop
040CAF C3 57 0E 04 0239            jp      CalcPlasmaStarts
040CB3             0240    
040CB3             0241    SineAddsXMsg:
040CB3 0D 0A 78 20 0242            defb CR, LF, "x increment: ", EOS
       69 6E 63 72 
       65 6D 65 6E 
       74 3A 20 00 
040CC3             0243    SineAddsYMsg:
040CC3 0D 0A 79 20 0244            defb CR, LF, "y increment: ", EOS
       69 6E 63 72 
       65 6D 65 6E 
       74 3A 20 00 
040CD3             0245    SineStartsMsg:
040CD3 0D 0A 69 6E 0246            defb CR, LF, "init values: ", EOS
       69 74 20 76 
       61 6C 75 65 
       73 3A 20 00 
040CE3             0247    SineSpeedsMsg:
040CE3 0D 0A 73 69 0248            defb CR, LF, "sine speeds: ", EOS
       6E 65 20 73 
       70 65 65 64 
       73 3A 20 00 
040CF3             0249    PlasmaFreqMsg:
040CF3 0D 0A 70 6C 0250            defb CR, LF, "plasma freq: ", EOS
       61 73 6D 61 
       20 66 72 65 
       71 3A 20 00 
040D03             0251    CycleSpeedMsg:
040D03 0D 0A 63 79 0252            defb CR, LF, "cycle speed: ", EOS
       63 6C 65 20 
       73 70 65 65 
       64 3A 20 00 
040D13             0253    
040D13             0254    ; display current parameter values
040D13             0255    ViewParameters:
040D13 21 27 0E 04 0256            ld      hl, PlasmaParams
040D17 11 B3 0C 04 0257            ld      de, SineAddsXMsg
040D1B CD 58 0D 04 0258            call    ShowSinePnts
040D1F 11 C3 0C 04 0259            ld      de, SineAddsYMsg
040D23 CD 58 0D 04 0260            call    ShowSinePnts
040D27 11 D3 0C 04 0261            ld      de, SineStartsMsg
040D2B CD 58 0D 04 0262            call    ShowSinePnts
040D2F 11 E3 0C 04 0263            ld      de, SineSpeedsMsg
040D33 CD 52 0D 04 0264            call    ShowTwoParams
040D37 11 F3 0C 04 0265            ld      de, PlasmaFreqMsg
040D3B CD 52 0D 04 0266            call    ShowTwoParams
040D3F 11 03 0D 04 0267            ld      de, CycleSpeedMsg
040D43 CD 4C 0D 04 0268            call    ShowOneParam
040D47 CD 61 00 04 0269            call    NewLine
040D4B C9          0270            ret
040D4C             0271    ShowOneParam:
040D4C 06 01       0272            ld      b, 1
040D4E C3 5A 0D 04 0273            jp      ShowBParams
040D52             0274    ShowTwoParams:
040D52 06 02       0275            ld      b, 2
040D54 C3 5A 0D 04 0276            jp      ShowBParams
040D58             0277    ShowSinePnts:
040D58 06 08       0278            ld      b, NumSinePnts
040D5A             0279    ShowBParams:
040D5A E5          0280            push    hl
040D5B C5          0281            push    bc
040D5C CD 48 00 04 0282            call    StringOut
040D60 C1          0283            pop     bc
040D61 E1          0284            pop     hl
040D62             0285    ShowParameterLoop:
040D62 7E          0286            ld      a, (hl)
040D63 23          0287            inc     hl
040D64 E5          0288            push    hl
040D65 C5          0289            push    bc
040D66 CD 0C 03 04 0290            call    HexByte
040D6A CD 5A 00 04 0291            call    Space
040D6E C1          0292            pop     bc
040D6F E1          0293            pop     hl
040D70 10 F0       0294            djnz    ShowParameterLoop
040D72 C9          0295            ret
040D73             0296    
040D73             0297    ; RandomParameters generates a complete set of random parameters
040D73             0298    RandomParameters:
040D73 16 00       0299            ld      d, 0
040D75 0E 07       0300            ld      c, 7                    ; -8 to 7
040D77 06 08       0301            ld      b, NumSinePnts
040D79 21 27 0E 04 0302            ld      hl, SineAddsX
040D7D CD 71 03 04 0303            call    RandomSeries
040D81 0E 03       0304            ld      c, 3                    ; -4 to 3
040D83 06 08       0305            ld      b, NumSinePnts
040D85 21 2F 0E 04 0306            ld      hl, SineAddsY
040D89 CD 71 03 04 0307            call    RandomSeries
040D8D 0E 7F       0308            ld      c, $7f                  ; -128 to 127
040D8F 06 08       0309            ld      b, NumSinePnts
040D91 21 37 0E 04 0310            ld      hl, SineStartsY
040D95 CD 71 03 04 0311            call    RandomSeries
040D99 0E 03       0312            ld      c, 3                    ; -4 to 3
040D9B 06 02       0313            ld      b, 2
040D9D 21 3F 0E 04 0314            ld      hl, SineSpeeds
040DA1 CD 71 03 04 0315            call    RandomSeries
040DA5 0E 03       0316            ld      c, 3                    ; 1 to 8
040DA7 16 05       0317            ld      d, 5
040DA9 06 02       0318            ld      b, 2
040DAB 21 41 0E 04 0319            ld      hl, PlasmaFreqs
040DAF CD 71 03 04 0320            call    RandomSeries
040DB3 0E 07       0321            ld      c, 7                    ; -16 to -1
040DB5 16 F8       0322            ld      d, -8
040DB7 06 01       0323            ld      b, 1
040DB9 21 43 0E 04 0324            ld      hl, CycleSpeed
040DBD CD 71 03 04 0325            call    RandomSeries
040DC1 CD 4F 03 04 0326            call    RandomNumber            ; randomly select palette
040DC5 7D          0327            ld      a, l
040DC6 32 44 0E 04 0328            ld      (ColorPalette), a
040DCA CD 57 0E 04 0329            call    CalcPlasmaStarts
040DCE C3 79 07 04 0330            jp      LoadPalette
040DD2             0331    
040DD2             0332    ; =============================================================================
040DD2             0333    ; effect intialization
040DD2             0334    
040DD2             0335    DurationCnt:
040DD2 00          0336            defb    0
040DD3             0337    PlasmaParamPnt:
040DD3             0338            DefPointer    0
040DD3 00 00 00    0001M           .dl addr
040DD6             0339    
040DD6             0340    NextEffect:
040DD6 3A 7C 0C 04 0341            ld      a, (UseRandomParams)
040DDA B7          0342            or      a
040DDB C2 73 0D 04 0343            jp      nz, RandomParameters
040DDF 2A D3 0D 04 0344            ld      hl, (PlasmaParamPnt)
040DE3 11 1E 00 00 0345            ld      de, PlasmaParamLen
040DE7 19          0346            add     hl, de
040DE8 22 D3 0D 04 0347            ld      (PlasmaParamPnt), hl
040DEC 11 89 06 04 0348            ld      de, LastPlasmaParam
040DF0 B7          0349            or      a
040DF1 ED 52       0350            sbc     hl, de
040DF3 DA FF 0D 04 0351            jp      c, InitEffect
040DF7             0352            ; fallthrough
040DF7             0353    
040DF7             0354    FirstEffect:
040DF7 21 21 05 04 0355            ld      hl, PlasmaParamList
040DFB 22 D3 0D 04 0356            ld      (PlasmaParamPnt), hl
040DFF             0357            ; fallthrough
040DFF             0358    
040DFF             0359    InitEffect:
040DFF 2A D3 0D 04 0360            ld      hl, (PlasmaParamPnt)            ; copy parameters
040E03 11 27 0E 04 0361            ld      de, PlasmaParams
040E07 01 1E 00 00 0362            ld      bc, PlasmaParamLen
040E0B ED B0       0363            ldir
040E0D             0364    
040E0D AF          0365            xor     a                               ; reset counters
040E0E 32 15 0F 04 0366            ld      (PlasmaCnts), a
040E12 32 16 0F 04 0367            ld      (PlasmaCnts+1), a
040E16 32 17 0F 04 0368            ld      (CycleCnt), a
040E1A 32 D2 0D 04 0369            ld      (DurationCnt), a
040E1E             0370    
040E1E CD 57 0E 04 0371            call    CalcPlasmaStarts
040E22 CD 79 07 04 0372            call    LoadPalette
040E26 C9          0373            ret
040E27             0374    
040E27             0375    ; =============================================================================
040E27             0376    ; plasma calculations
040E27             0377    
040E27             0378    ; PlasmaParams holds parameters for the current effect
040E27             0379    PlasmaParams:
040E27             0380    SineAddsX:
040E27             0381            defs    NumSinePnts
040E2F             0382    SineAddsY:
040E2F             0383            defs    NumSinePnts
040E37             0384    SineStartsY:
040E37             0385            defs    NumSinePnts
040E3F             0386    SineSpeeds:
040E3F             0387            defs    NumSineSpeeds
040E41             0388    PlasmaFreqs:
040E41             0389            defs    NumPlasmaFreqs
040E43             0390    CycleSpeed:
040E43             0391            defs    NumCycleSpeeds
040E44             0392    ColorPalette:
040E44 00          0393            defb    0
040E45             0394    PlasmaParamLen: equ $ - PlasmaParams
040E45             0395    
040E45             0396    ; NextPalette changes to the next color palette
040E45             0397    NextPalette:
040E45 21 44 0E 04 0398            ld      hl, ColorPalette        ; increment the palette number
040E49 34          0399            inc     (hl)
040E4A 7E          0400            ld      a, (hl)
040E4B FE 0D       0401            cp      ColorPaletteCount       ; check if it's beyond the last one
040E4D DA 79 07 04 0402            jp      c, LoadPalette          ; if not, load it
040E51 AF          0403            xor     a                       ; if so, wrap around to the first one
040E52 77          0404            ld      (hl), a
040E53 C3 79 07 04 0405            jp      LoadPalette
040E57             0406    
040E57             0407    
040E57             0408    ; CalcPlasmaStarts calculates the initial value for each tile by summing together 8 sine waves of
040E57             0409    ; varying frequencies which combine to create the contours of a still image. Each sine wave is
040E57             0410    ; defined by a StartAngle, RowFreq and ColFreq which are applied to each X, Y coordinate as:
040E57             0411    ; StillFrame(x,y) = sum[n=1..8]: sin(StartAngle[n] + ColFreq[n] * x + RowFreq[n] * y)
040E57             0412    
040E57             0413    ; The calculation of the input angle for each X and Y coordinate is accomplished by successive
040E57             0414    ; additions of the RowFreq and ColFreq values for to the respective RowAngle and ColAngle
040E57             0415    ; accumulators.
040E57             0416    CalcPlasmaStarts:
040E57 21 37 0E 04 0417            ld      hl, SineStartsY         ; for each of 8 sine waves,
040E5B 11 D1 0E 04 0418            ld      de, SinePntsY           ; initialize SinePntsY to SineStartsY
040E5F 01 08 00 00 0419            ld      bc, NumSinePnts
040E63 ED B0       0420            ldir
040E65 21 00 12 04 0421            ld      hl, PlasmaStarts
040E69 0E 1E       0422            ld      c, ScreenHeight         ; for each row...
040E6B             0423    YLoop:
040E6B D9          0424            exx
040E6C 01 D1 0E 04 0425            ld      bc, SinePntsY
040E70 21 2F 0E 04 0426            ld      hl, SineAddsY
040E74 11 C9 0E 04 0427            ld      de, SinePntsX
040E78 D9          0428            exx
040E79 16 08       0429            ld      d, NumSinePnts
040E7B             0430    SinePntsYLoop:
040E7B D9          0431            exx                             ; for each sine wave...
040E7C 0A          0432            ld      a, (bc)
040E7D 86          0433            add     a, (hl)                 ; add SineAddsY to SinePntsY
040E7E 02          0434            ld      (bc), a
040E7F 12          0435            ld      (de), a                 ; initialize SinePntsX to SinePntsY
040E80 03          0436            inc     bc
040E81 13          0437            inc     de
040E82 23          0438            inc     hl
040E83 D9          0439            exx
040E84 15          0440            dec     d
040E85 C2 7B 0E 04 0441            jp      nz, SinePntsYLoop       ; ... next sine wave
040E89 06 28       0442            ld      b, ScreenWidth          ; for each column...
040E8B             0443    XLoop:
040E8B D9          0444            exx
040E8C 11 C9 0E 04 0445            ld      de, SinePntsX
040E90 21 27 0E 04 0446            ld      hl, SineAddsX
040E94 06 08       0447            ld      b, NumSinePnts          ; for each sine wave...
040E96             0448    SinePntsXLoop:
040E96 1A          0449            ld      a, (de)
040E97 86          0450            add     a, (hl)                 ; add SineAddsX to SinePntsX
040E98 12          0451            ld      (de), a
040E99 13          0452            inc     de
040E9A 23          0453            inc     hl
040E9B 10 F9       0454            djnz    SinePntsXLoop           ; ... next sine wave
040E9D             0455    
040E9D 21 00 10 04 0456            ld      hl, SineTable
040EA1 11 C9 0E 04 0457            ld      de, SinePntsX
040EA5 AF          0458            xor     a                       ; initialize to zero
040EA6 06 08       0459            ld      b, NumSinePnts          ; for each sine wave...
040EA8             0460    SineAddLoop:
040EA8 08          0461            ex      af, af'
040EA9 1A          0462            ld      a, (de)                 ; look up SinePntsX in SineTable
040EAA 6F          0463            ld      l, a
040EAB 08          0464            ex      af, af'
040EAC 86          0465            add     a, (hl)                 ; accumulate values from SineTable
040EAD 13          0466            inc     de
040EAE 10 F8       0467            djnz    SineAddLoop             ; ...next sine wave
040EB0 D9          0468            exx
040EB1 77          0469            ld      (hl), a                 ; save accumulated value in PlasmaStarts
040EB2 23          0470            inc     hl
040EB3 10 D6       0471            djnz    XLoop                   ; ... next column
040EB5 0D          0472            dec     c
040EB6 C2 6B 0E 04 0473            jp      nz, YLoop               ; ... next row
040EBA             0474    UpdateScreen:
040EBA 21 00 12 04 0475            ld      hl, PlasmaStarts        ; transfer PlasmaStarts to screen buffer
040EBE 11 B0 16 04 0476            ld      de, ScreenBuffer
040EC2 01 B0 04 00 0477            ld      bc, ScreenSize
040EC6 ED B0       0478            ldir
040EC8 C9          0479            ret
040EC9             0480    
040EC9             0481    SinePntsX:
040EC9             0482            defs    NumSinePnts
040ED1             0483    SinePntsY:
040ED1             0484            defs    NumSinePnts
040ED9             0485    
040ED9             0486    ; CalcPlasmaFrame applies distortion and color cycling effects to the original image StillFrame.
040ED9             0487    ;
040ED9             0488    ; For each frame, tiles are shifted based on LinearSpeed and two SineSpeeds.  In addition, each
040ED9             0489    ; row is warped by sine waves defined by two RowWarp parameters. For each row y of frame f, the
040ED9             0490    ; total offset applied to each tile of StillFrame is calcualted according to this formula:
040ED9             0491    ; D(f,y) = LinearSpeed * f + (sum [n=0..1]: sin(SineSpeed[n] * f + RowWarp[n] * y)) / 2
040ED9             0492    CalcPlasmaFrame:
040ED9 3A 7B 0C 04 0493            ld      a, (StopAnimation)
040EDD B7          0494            or      a
040EDE C0          0495            ret     nz
040EDF 01 15 0F 04 0496            ld      bc, PlasmaCnts
040EE3 ED 5B 3F 0E 0497            ld      de, (SineSpeeds)
       04          
040EE8 0A          0498            ld      a, (bc)
040EE9 67          0499            ld      h, a
040EEA 83          0500            add     a, e
040EEB 02          0501            ld      (bc), a
040EEC 03          0502            inc     bc
040EED 0A          0503            ld      a, (bc)
040EEE 6F          0504            ld      l, a
040EEF 82          0505            add     a, d
040EF0 02          0506            ld      (bc), a
040EF1 11 00 10 04 0507            ld      de, SineTable
040EF5 5C          0508            ld      e, h
040EF6 62          0509            ld      h, d
040EF7 ED 4B 41 0E 0510            ld      bc, (PlasmaFreqs)
       04          
040EFC D9          0511            exx
040EFD 11 17 0F 04 0512            ld      de, CycleCnt
040F01 1A          0513            ld      a, (de)
040F02 4F          0514            ld      c, a
040F03 21 43 0E 04 0515            ld      hl, CycleSpeed
040F07 86          0516            add     a, (hl)
040F08 12          0517            ld      (de), a
040F09 21 00 12 04 0518            ld      hl, PlasmaStarts
040F0D 11 B0 16 04 0519            ld      de, ScreenBuffer
040F11 C3 60 1B 04 0520            jp      SpeedCode
040F15             0521    
040F15             0522    ; calculate new plasma frame from starting point and current counts
040F15             0523    PlasmaCnts:
040F15 00 00       0524            defw    0
040F17             0525    CycleCnt:
040F17 00          0526            defb    0
040F18             0527    
040F18             0528    ; setup for speedcode:
040F18             0529    ;       de  = pointer to first sine table entry
040F18             0530    ;       hl  = pointer to second sine table entry
040F18             0531    ;       c   = amount to increment first sine pointer between lines
040F18             0532    ;       b   = amount to increment second sine pointer between lines
040F18             0533    ;       c'  = current cycle count
040F18             0534    ;       b'  = offset to add to starting value for current row
040F18             0535    ;       hl' = pointer to starting plasma values
040F18             0536    ;       de' = pointer to screen back buffer
040F18             0537    ;       a   = temporary calculations
040F18             0538    
040F18             0539    RowSrc:
040F18 D9          0540            exx
040F19 7B          0541            ld      a, e
040F1A 81          0542            add     a, c
040F1B 5F          0543            ld      e, a
040F1C 7D          0544            ld      a, l
040F1D 80          0545            add     a, b
040F1E 6F          0546            ld      l, a
040F1F 1A          0547            ld      a, (de)
040F20 86          0548            add     a, (hl)
040F21 1F          0549            rra
040F22 D9          0550            exx
040F23 89          0551            adc     a, c
040F24 47          0552            ld      b, a
040F25             0553    RowSrcLen:     equ $ - RowSrc
040F25             0554    
040F25             0555    ColSrc:
040F25 7E          0556            ld      a, (hl)
040F26 80          0557            add     a, b
040F27 12          0558            ld      (de), a
040F28 23          0559            inc     hl
040F29 13          0560            inc     de
040F2A             0561    ColSrcLen:      equ $ - ColSrc
040F2A             0562    
040F2A             0563    ; build unrolled loops for speed
040F2A             0564    MakeSpeedCode:
040F2A 11 60 1B 04 0565            ld      de, SpeedCode
040F2E 3E 1E       0566            ld      a, ScreenHeight
040F30             0567    RowLoop:
040F30 21 18 0F 04 0568            ld      hl, RowSrc
040F34 01 0D 00 00 0569            ld      bc, RowSrcLen
040F38 ED B0       0570            ldir
040F3A 08          0571            ex      af, af'
040F3B 3E 28       0572            ld      a, ScreenWidth
040F3D             0573    ColLoop:
040F3D 21 25 0F 04 0574            ld      hl, ColSrc
040F41 01 05 00 00 0575            ld      bc, ColSrcLen
040F45 ED B0       0576            ldir
040F47 3D          0577            dec     a
040F48 C2 3D 0F 04 0578            jp      nz, ColLoop
040F4C 08          0579            ex      af, af'
040F4D 3D          0580            dec     a
040F4E C2 30 0F 04 0581            jp      nz, RowLoop
040F52 3A 57 0F 04 0582            ld      a, (RetSrc)
040F56 12          0583            ld      (de), a
040F57             0584    RetSrc:
040F57 C9          0585            ret
040F58             0586    
040F58             0587    
040F58             0588    ; MakeSineTable builds the sine table for a complete period from a precalculated quarter period.
040F58             0589    ; The first 64 values are copied verbatim from the precomputed values. The next 64 values are
040F58             0590    ; flipped horizontally by copying them in reverse order. The last 128 values are flipped
040F58             0591    ; vertically by complementing them. The vertically flipped values are written twice, first in
040F58             0592    ; forward order, and then in reverse order to flip them horizontally and complete the period.
040F58             0593    ; The resulting lookup table is 256 bytes long and stored on a 256-byte boundary so that a sine
040F58             0594    ; value can be looked up by loading a single register with the input value.
040F58             0595    
040F58             0596    MakeSineTable:
040F58 01 89 06 04 0597            ld      bc, SineSrc             ; source values
040F5C 11 00 10 04 0598            ld      de, SineTable           ; start of 1st quarter
040F60 21 7F 10 04 0599            ld      hl, SineTable+$7f       ; end of 2nd quarter
040F64 D9          0600            exx
040F65 06 40       0601            ld      b, $40                  ; counter
040F67 11 80 10 04 0602            ld      de, SineTable+$80       ; start of 3rd quarter
040F6B 21 FF 10 04 0603            ld      hl, SineTable+$ff       ; end of 4th quarter
040F6F             0604    SineLoop:
040F6F D9          0605            exx
040F70 0A          0606            ld      a, (bc)                 ; load source value
040F71 03          0607            inc     bc
040F72 12          0608            ld      (de), a                 ; store 1st quarter
040F73 13          0609            inc     de
040F74 77          0610            ld      (hl), a                 ; store 2nd quarter
040F75 2B          0611            dec     hl                      ; in reverse order
040F76 D9          0612            exx
040F77 2F          0613            cpl                             ; flip vertically
040F78 12          0614            ld      (de), a                 ; store 3rd quarter
040F79 13          0615            inc     de
040F7A 77          0616            ld      (hl), a                 ; store 4th quarter
040F7B 2B          0617            dec     hl                      ; in reverse order
040F7C 10 F1       0618            djnz    SineLoop
040F7E C9          0619            ret
040F7F             0620    
040F7F             0621    NextPage:       equ $ + $ff
040F7F             0622    SineTable:      equ NextPage & PageMask         ; page align
040F7F             0623    Stack:          equ SineTable + $200
040F7F             0624    PlasmaStarts:   equ Stack
040F7F             0625    ScreenBuffer:   equ PlasmaStarts + ScreenSize
040F7F             0626    SpeedCode:      equ ScreenBuffer + ScreenSize
